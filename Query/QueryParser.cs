//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Query.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class QueryParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, SELECT=2, ORDER=3, BY=4, ASC=5, DESC=6, WHERE=7, FIRST=8, LAST=9, 
		NULLS=10, ALL=11, AS=12, DISTINCT=13, REGEXP=14, AND=15, OR=16, LPAREN=17, 
		RPAREN=18, LBRACE=19, RBRACE=20, LBRACK=21, RBRACK=22, SEMI=23, COMMA=24, 
		GT=25, LT=26, NOT=27, EQ=28, NEQ=29, LE=30, GE=31, ADD=32, SUB=33, MUL=34, 
		DIV=35, MOD=36, ID=37, INT=38, TRUE=39, FALSE=40, DOUBLE=41, WHITESPACE=42, 
		STRING=43;
	public const int
		RULE_program = 0, RULE_statement_list = 1, RULE_statement = 2, RULE_where_clause = 3, 
		RULE_order_by_clause = 4, RULE_order_list = 5, RULE_order_item = 6, RULE_order = 7, 
		RULE_nulls = 8, RULE_sel_list = 9, RULE_sel_item = 10, RULE_sel_modifier = 11, 
		RULE_sel_expr = 12, RULE_cond_expr = 13, RULE_cond_expr_no_gt = 14, RULE_and_expr = 15, 
		RULE_and_expr_no_gt = 16, RULE_not_expr = 17, RULE_not_expr_no_gt = 18, 
		RULE_bool_expr = 19, RULE_bool_expr_no_gt = 20, RULE_basic_expr = 21, 
		RULE_fact_expr = 22, RULE_neg_expr = 23, RULE_term_expr = 24, RULE_identifier = 25, 
		RULE_string_const = 26, RULE_bool_const = 27, RULE_int_const = 28, RULE_double_const = 29, 
		RULE_expr_list_opt = 30, RULE_expr_list = 31, RULE_expr_list_no_gt = 32, 
		RULE_rel_op = 33, RULE_rel_op_no_gt = 34, RULE_error = 35;
	public static readonly string[] ruleNames = {
		"program", "statement_list", "statement", "where_clause", "order_by_clause", 
		"order_list", "order_item", "order", "nulls", "sel_list", "sel_item", 
		"sel_modifier", "sel_expr", "cond_expr", "cond_expr_no_gt", "and_expr", 
		"and_expr_no_gt", "not_expr", "not_expr_no_gt", "bool_expr", "bool_expr_no_gt", 
		"basic_expr", "fact_expr", "neg_expr", "term_expr", "identifier", "string_const", 
		"bool_const", "int_const", "double_const", "expr_list_opt", "expr_list", 
		"expr_list_no_gt", "rel_op", "rel_op_no_gt", "error"
	};

	private static readonly string[] _LiteralNames = {
		null, "'error'", "'SELECT'", "'ORDER'", "'BY'", "'ASC'", "'DESC'", "'WHERE'", 
		"'FIRST'", "'LAST'", "'NULLS'", "'ALL'", "'AS'", "'DISTINCT'", "'REGEXP'", 
		null, null, "'('", "')'", "'{'", "'}'", "'['", "']'", "';'", "','", "'>'", 
		"'<'", "'!'", "'=='", "'!='", "'<='", "'>='", "'+'", "'-'", "'*'", "'/'", 
		"'%'", null, null, "'true'", "'false'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "SELECT", "ORDER", "BY", "ASC", "DESC", "WHERE", "FIRST", 
		"LAST", "NULLS", "ALL", "AS", "DISTINCT", "REGEXP", "AND", "OR", "LPAREN", 
		"RPAREN", "LBRACE", "RBRACE", "LBRACK", "RBRACK", "SEMI", "COMMA", "GT", 
		"LT", "NOT", "EQ", "NEQ", "LE", "GE", "ADD", "SUB", "MUL", "DIV", "MOD", 
		"ID", "INT", "TRUE", "FALSE", "DOUBLE", "WHITESPACE", "STRING"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Query.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static QueryParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public QueryParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public QueryParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72; statement_list(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_listContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(QueryParser.SEMI, 0); }
		public Statement_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_list; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Statement_listContext statement_list() {
		return statement_list(0);
	}

	private Statement_listContext statement_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Statement_listContext _localctx = new Statement_listContext(Context, _parentState);
		Statement_listContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_statement_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 75; statement();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 82;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Statement_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_statement_list);
					State = 77;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 78; Match(SEMI);
					State = 79; statement();
					}
					} 
				}
				State = 84;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public ITerminalNode SELECT() { return GetToken(QueryParser.SELECT, 0); }
		public Sel_listContext sel_list() {
			return GetRuleContext<Sel_listContext>(0);
		}
		public Where_clauseContext where_clause() {
			return GetRuleContext<Where_clauseContext>(0);
		}
		public Order_by_clauseContext order_by_clause() {
			return GetRuleContext<Order_by_clauseContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85; Match(SELECT);
			State = 86; sel_list(0);
			State = 88;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				{
				State = 87; where_clause();
				}
				break;
			}
			State = 91;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				State = 90; order_by_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Where_clauseContext : ParserRuleContext {
		public ITerminalNode WHERE() { return GetToken(QueryParser.WHERE, 0); }
		public Cond_exprContext cond_expr() {
			return GetRuleContext<Cond_exprContext>(0);
		}
		public Where_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_where_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhere_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Where_clauseContext where_clause() {
		Where_clauseContext _localctx = new Where_clauseContext(Context, State);
		EnterRule(_localctx, 6, RULE_where_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93; Match(WHERE);
			State = 94; cond_expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Order_by_clauseContext : ParserRuleContext {
		public ITerminalNode ORDER() { return GetToken(QueryParser.ORDER, 0); }
		public ITerminalNode BY() { return GetToken(QueryParser.BY, 0); }
		public Order_listContext order_list() {
			return GetRuleContext<Order_listContext>(0);
		}
		public Order_by_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order_by_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrder_by_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Order_by_clauseContext order_by_clause() {
		Order_by_clauseContext _localctx = new Order_by_clauseContext(Context, State);
		EnterRule(_localctx, 8, RULE_order_by_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96; Match(ORDER);
			State = 97; Match(BY);
			State = 98; order_list(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Order_listContext : ParserRuleContext {
		public Order_itemContext order_item() {
			return GetRuleContext<Order_itemContext>(0);
		}
		public Order_listContext order_list() {
			return GetRuleContext<Order_listContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(QueryParser.COMMA, 0); }
		public Order_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order_list; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrder_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Order_listContext order_list() {
		return order_list(0);
	}

	private Order_listContext order_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Order_listContext _localctx = new Order_listContext(Context, _parentState);
		Order_listContext _prevctx = _localctx;
		int _startState = 10;
		EnterRecursionRule(_localctx, 10, RULE_order_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 101; order_item();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 108;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Order_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_order_list);
					State = 103;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 104; Match(COMMA);
					State = 105; order_item();
					}
					} 
				}
				State = 110;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Order_itemContext : ParserRuleContext {
		public Cond_exprContext cond_expr() {
			return GetRuleContext<Cond_exprContext>(0);
		}
		public OrderContext order() {
			return GetRuleContext<OrderContext>(0);
		}
		public NullsContext nulls() {
			return GetRuleContext<NullsContext>(0);
		}
		public Order_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order_item; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrder_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Order_itemContext order_item() {
		Order_itemContext _localctx = new Order_itemContext(Context, State);
		EnterRule(_localctx, 12, RULE_order_item);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111; cond_expr(0);
			State = 113;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 112; order();
				}
				break;
			}
			State = 116;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 115; nulls();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderContext : ParserRuleContext {
		public ITerminalNode ASC() { return GetToken(QueryParser.ASC, 0); }
		public ITerminalNode DESC() { return GetToken(QueryParser.DESC, 0); }
		public OrderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrder(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderContext order() {
		OrderContext _localctx = new OrderContext(Context, State);
		EnterRule(_localctx, 14, RULE_order);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118;
			_la = TokenStream.LA(1);
			if ( !(_la==ASC || _la==DESC) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullsContext : ParserRuleContext {
		public ITerminalNode NULLS() { return GetToken(QueryParser.NULLS, 0); }
		public ITerminalNode FIRST() { return GetToken(QueryParser.FIRST, 0); }
		public ITerminalNode LAST() { return GetToken(QueryParser.LAST, 0); }
		public NullsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nulls; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNulls(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullsContext nulls() {
		NullsContext _localctx = new NullsContext(Context, State);
		EnterRule(_localctx, 16, RULE_nulls);
		try {
			State = 124;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 120; Match(NULLS);
				State = 121; Match(FIRST);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 122; Match(NULLS);
				State = 123; Match(LAST);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sel_listContext : ParserRuleContext {
		public Sel_itemContext sel_item() {
			return GetRuleContext<Sel_itemContext>(0);
		}
		public Sel_listContext sel_list() {
			return GetRuleContext<Sel_listContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(QueryParser.COMMA, 0); }
		public Sel_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sel_list; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sel_listContext sel_list() {
		return sel_list(0);
	}

	private Sel_listContext sel_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Sel_listContext _localctx = new Sel_listContext(Context, _parentState);
		Sel_listContext _prevctx = _localctx;
		int _startState = 18;
		EnterRecursionRule(_localctx, 18, RULE_sel_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 127; sel_item();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 134;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Sel_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_sel_list);
					State = 129;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 130; Match(COMMA);
					State = 131; sel_item();
					}
					} 
				}
				State = 136;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Sel_itemContext : ParserRuleContext {
		public Sel_exprContext sel_expr() {
			return GetRuleContext<Sel_exprContext>(0);
		}
		public Sel_modifierContext sel_modifier() {
			return GetRuleContext<Sel_modifierContext>(0);
		}
		public ITerminalNode AS() { return GetToken(QueryParser.AS, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Sel_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sel_item; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sel_itemContext sel_item() {
		Sel_itemContext _localctx = new Sel_itemContext(Context, State);
		EnterRule(_localctx, 20, RULE_sel_item);
		int _la;
		try {
			State = 148;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 138;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ALL || _la==DISTINCT) {
					{
					State = 137; sel_modifier();
					}
				}

				State = 140; sel_expr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 142;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ALL || _la==DISTINCT) {
					{
					State = 141; sel_modifier();
					}
				}

				State = 144; sel_expr();
				State = 145; Match(AS);
				State = 146; identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sel_modifierContext : ParserRuleContext {
		public ITerminalNode ALL() { return GetToken(QueryParser.ALL, 0); }
		public ITerminalNode DISTINCT() { return GetToken(QueryParser.DISTINCT, 0); }
		public Sel_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sel_modifier; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sel_modifierContext sel_modifier() {
		Sel_modifierContext _localctx = new Sel_modifierContext(Context, State);
		EnterRule(_localctx, 22, RULE_sel_modifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150;
			_la = TokenStream.LA(1);
			if ( !(_la==ALL || _la==DISTINCT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sel_exprContext : ParserRuleContext {
		public Cond_exprContext cond_expr() {
			return GetRuleContext<Cond_exprContext>(0);
		}
		public Sel_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sel_expr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sel_exprContext sel_expr() {
		Sel_exprContext _localctx = new Sel_exprContext(Context, State);
		EnterRule(_localctx, 24, RULE_sel_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152; cond_expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cond_exprContext : ParserRuleContext {
		public And_exprContext and_expr() {
			return GetRuleContext<And_exprContext>(0);
		}
		public ErrorContext error() {
			return GetRuleContext<ErrorContext>(0);
		}
		public Cond_exprContext cond_expr() {
			return GetRuleContext<Cond_exprContext>(0);
		}
		public ITerminalNode OR() { return GetToken(QueryParser.OR, 0); }
		public Cond_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cond_expr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCond_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cond_exprContext cond_expr() {
		return cond_expr(0);
	}

	private Cond_exprContext cond_expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Cond_exprContext _localctx = new Cond_exprContext(Context, _parentState);
		Cond_exprContext _prevctx = _localctx;
		int _startState = 26;
		EnterRecursionRule(_localctx, 26, RULE_cond_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 157;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAREN:
			case LBRACE:
			case LBRACK:
			case LT:
			case NOT:
			case SUB:
			case ID:
			case INT:
			case TRUE:
			case FALSE:
			case DOUBLE:
			case STRING:
				{
				State = 155; and_expr(0);
				}
				break;
			case T__0:
				{
				State = 156; error();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 164;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Cond_exprContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_cond_expr);
					State = 159;
					if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
					State = 160; Match(OR);
					State = 161; and_expr(0);
					}
					} 
				}
				State = 166;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Cond_expr_no_gtContext : ParserRuleContext {
		public And_expr_no_gtContext and_expr_no_gt() {
			return GetRuleContext<And_expr_no_gtContext>(0);
		}
		public ErrorContext error() {
			return GetRuleContext<ErrorContext>(0);
		}
		public Cond_expr_no_gtContext cond_expr_no_gt() {
			return GetRuleContext<Cond_expr_no_gtContext>(0);
		}
		public ITerminalNode OR() { return GetToken(QueryParser.OR, 0); }
		public Cond_expr_no_gtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cond_expr_no_gt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCond_expr_no_gt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cond_expr_no_gtContext cond_expr_no_gt() {
		return cond_expr_no_gt(0);
	}

	private Cond_expr_no_gtContext cond_expr_no_gt(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Cond_expr_no_gtContext _localctx = new Cond_expr_no_gtContext(Context, _parentState);
		Cond_expr_no_gtContext _prevctx = _localctx;
		int _startState = 28;
		EnterRecursionRule(_localctx, 28, RULE_cond_expr_no_gt, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 170;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAREN:
			case LBRACE:
			case LBRACK:
			case LT:
			case NOT:
			case SUB:
			case ID:
			case INT:
			case TRUE:
			case FALSE:
			case DOUBLE:
			case STRING:
				{
				State = 168; and_expr_no_gt(0);
				}
				break;
			case T__0:
				{
				State = 169; error();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 177;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Cond_expr_no_gtContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_cond_expr_no_gt);
					State = 172;
					if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
					State = 173; Match(OR);
					State = 174; and_expr_no_gt(0);
					}
					} 
				}
				State = 179;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class And_exprContext : ParserRuleContext {
		public Not_exprContext not_expr() {
			return GetRuleContext<Not_exprContext>(0);
		}
		public And_exprContext and_expr() {
			return GetRuleContext<And_exprContext>(0);
		}
		public ITerminalNode AND() { return GetToken(QueryParser.AND, 0); }
		public And_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_and_expr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnd_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public And_exprContext and_expr() {
		return and_expr(0);
	}

	private And_exprContext and_expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		And_exprContext _localctx = new And_exprContext(Context, _parentState);
		And_exprContext _prevctx = _localctx;
		int _startState = 30;
		EnterRecursionRule(_localctx, 30, RULE_and_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 181; not_expr();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 188;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new And_exprContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_and_expr);
					State = 183;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 184; Match(AND);
					State = 185; not_expr();
					}
					} 
				}
				State = 190;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class And_expr_no_gtContext : ParserRuleContext {
		public Not_expr_no_gtContext not_expr_no_gt() {
			return GetRuleContext<Not_expr_no_gtContext>(0);
		}
		public And_expr_no_gtContext and_expr_no_gt() {
			return GetRuleContext<And_expr_no_gtContext>(0);
		}
		public ITerminalNode AND() { return GetToken(QueryParser.AND, 0); }
		public And_expr_no_gtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_and_expr_no_gt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnd_expr_no_gt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public And_expr_no_gtContext and_expr_no_gt() {
		return and_expr_no_gt(0);
	}

	private And_expr_no_gtContext and_expr_no_gt(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		And_expr_no_gtContext _localctx = new And_expr_no_gtContext(Context, _parentState);
		And_expr_no_gtContext _prevctx = _localctx;
		int _startState = 32;
		EnterRecursionRule(_localctx, 32, RULE_and_expr_no_gt, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 192; not_expr_no_gt();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 199;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new And_expr_no_gtContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_and_expr_no_gt);
					State = 194;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 195; Match(AND);
					State = 196; not_expr_no_gt();
					}
					} 
				}
				State = 201;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Not_exprContext : ParserRuleContext {
		public Bool_exprContext bool_expr() {
			return GetRuleContext<Bool_exprContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(QueryParser.NOT, 0); }
		public Not_exprContext not_expr() {
			return GetRuleContext<Not_exprContext>(0);
		}
		public Not_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_not_expr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNot_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Not_exprContext not_expr() {
		Not_exprContext _localctx = new Not_exprContext(Context, State);
		EnterRule(_localctx, 34, RULE_not_expr);
		try {
			State = 205;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAREN:
			case LBRACE:
			case LBRACK:
			case LT:
			case SUB:
			case ID:
			case INT:
			case TRUE:
			case FALSE:
			case DOUBLE:
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 202; bool_expr();
				}
				break;
			case NOT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 203; Match(NOT);
				State = 204; not_expr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Not_expr_no_gtContext : ParserRuleContext {
		public Bool_expr_no_gtContext bool_expr_no_gt() {
			return GetRuleContext<Bool_expr_no_gtContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(QueryParser.NOT, 0); }
		public Not_expr_no_gtContext not_expr_no_gt() {
			return GetRuleContext<Not_expr_no_gtContext>(0);
		}
		public Not_expr_no_gtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_not_expr_no_gt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNot_expr_no_gt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Not_expr_no_gtContext not_expr_no_gt() {
		Not_expr_no_gtContext _localctx = new Not_expr_no_gtContext(Context, State);
		EnterRule(_localctx, 36, RULE_not_expr_no_gt);
		try {
			State = 210;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAREN:
			case LBRACE:
			case LBRACK:
			case LT:
			case SUB:
			case ID:
			case INT:
			case TRUE:
			case FALSE:
			case DOUBLE:
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 207; bool_expr_no_gt();
				}
				break;
			case NOT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 208; Match(NOT);
				State = 209; not_expr_no_gt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bool_exprContext : ParserRuleContext {
		public Basic_exprContext[] basic_expr() {
			return GetRuleContexts<Basic_exprContext>();
		}
		public Basic_exprContext basic_expr(int i) {
			return GetRuleContext<Basic_exprContext>(i);
		}
		public Rel_opContext rel_op() {
			return GetRuleContext<Rel_opContext>(0);
		}
		public ITerminalNode REGEXP() { return GetToken(QueryParser.REGEXP, 0); }
		public String_constContext string_const() {
			return GetRuleContext<String_constContext>(0);
		}
		public Bool_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool_expr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBool_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bool_exprContext bool_expr() {
		Bool_exprContext _localctx = new Bool_exprContext(Context, State);
		EnterRule(_localctx, 38, RULE_bool_expr);
		try {
			State = 221;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 212; basic_expr(0);
				State = 213; rel_op();
				State = 214; basic_expr(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 216; basic_expr(0);
				State = 217; Match(REGEXP);
				State = 218; string_const();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 220; basic_expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bool_expr_no_gtContext : ParserRuleContext {
		public Basic_exprContext[] basic_expr() {
			return GetRuleContexts<Basic_exprContext>();
		}
		public Basic_exprContext basic_expr(int i) {
			return GetRuleContext<Basic_exprContext>(i);
		}
		public Rel_op_no_gtContext rel_op_no_gt() {
			return GetRuleContext<Rel_op_no_gtContext>(0);
		}
		public ITerminalNode REGEXP() { return GetToken(QueryParser.REGEXP, 0); }
		public String_constContext string_const() {
			return GetRuleContext<String_constContext>(0);
		}
		public Bool_expr_no_gtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool_expr_no_gt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBool_expr_no_gt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bool_expr_no_gtContext bool_expr_no_gt() {
		Bool_expr_no_gtContext _localctx = new Bool_expr_no_gtContext(Context, State);
		EnterRule(_localctx, 40, RULE_bool_expr_no_gt);
		try {
			State = 232;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 223; basic_expr(0);
				State = 224; rel_op_no_gt();
				State = 225; basic_expr(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 227; basic_expr(0);
				State = 228; Match(REGEXP);
				State = 229; string_const();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 231; basic_expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Basic_exprContext : ParserRuleContext {
		public Fact_exprContext fact_expr() {
			return GetRuleContext<Fact_exprContext>(0);
		}
		public Basic_exprContext basic_expr() {
			return GetRuleContext<Basic_exprContext>(0);
		}
		public ITerminalNode ADD() { return GetToken(QueryParser.ADD, 0); }
		public ITerminalNode SUB() { return GetToken(QueryParser.SUB, 0); }
		public Basic_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basic_expr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBasic_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Basic_exprContext basic_expr() {
		return basic_expr(0);
	}

	private Basic_exprContext basic_expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Basic_exprContext _localctx = new Basic_exprContext(Context, _parentState);
		Basic_exprContext _prevctx = _localctx;
		int _startState = 42;
		EnterRecursionRule(_localctx, 42, RULE_basic_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 235; fact_expr(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 245;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 243;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
					case 1:
						{
						_localctx = new Basic_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_basic_expr);
						State = 237;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 238; Match(ADD);
						State = 239; fact_expr(0);
						}
						break;
					case 2:
						{
						_localctx = new Basic_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_basic_expr);
						State = 240;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 241; Match(SUB);
						State = 242; fact_expr(0);
						}
						break;
					}
					} 
				}
				State = 247;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Fact_exprContext : ParserRuleContext {
		public Neg_exprContext neg_expr() {
			return GetRuleContext<Neg_exprContext>(0);
		}
		public Fact_exprContext fact_expr() {
			return GetRuleContext<Fact_exprContext>(0);
		}
		public ITerminalNode MUL() { return GetToken(QueryParser.MUL, 0); }
		public ITerminalNode DIV() { return GetToken(QueryParser.DIV, 0); }
		public ITerminalNode MOD() { return GetToken(QueryParser.MOD, 0); }
		public Fact_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fact_expr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFact_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fact_exprContext fact_expr() {
		return fact_expr(0);
	}

	private Fact_exprContext fact_expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Fact_exprContext _localctx = new Fact_exprContext(Context, _parentState);
		Fact_exprContext _prevctx = _localctx;
		int _startState = 44;
		EnterRecursionRule(_localctx, 44, RULE_fact_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 249; neg_expr();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 262;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 260;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
					case 1:
						{
						_localctx = new Fact_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_fact_expr);
						State = 251;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 252; Match(MUL);
						State = 253; neg_expr();
						}
						break;
					case 2:
						{
						_localctx = new Fact_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_fact_expr);
						State = 254;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 255; Match(DIV);
						State = 256; neg_expr();
						}
						break;
					case 3:
						{
						_localctx = new Fact_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_fact_expr);
						State = 257;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 258; Match(MOD);
						State = 259; neg_expr();
						}
						break;
					}
					} 
				}
				State = 264;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Neg_exprContext : ParserRuleContext {
		public ITerminalNode SUB() { return GetToken(QueryParser.SUB, 0); }
		public Neg_exprContext neg_expr() {
			return GetRuleContext<Neg_exprContext>(0);
		}
		public Term_exprContext term_expr() {
			return GetRuleContext<Term_exprContext>(0);
		}
		public Neg_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_neg_expr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNeg_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Neg_exprContext neg_expr() {
		Neg_exprContext _localctx = new Neg_exprContext(Context, State);
		EnterRule(_localctx, 46, RULE_neg_expr);
		try {
			State = 268;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SUB:
				EnterOuterAlt(_localctx, 1);
				{
				State = 265; Match(SUB);
				State = 266; neg_expr();
				}
				break;
			case LPAREN:
			case LBRACE:
			case LBRACK:
			case LT:
			case ID:
			case INT:
			case TRUE:
			case FALSE:
			case DOUBLE:
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 267; term_expr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Term_exprContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(QueryParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(QueryParser.RPAREN, 0); }
		public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		public ITerminalNode MUL() { return GetToken(QueryParser.MUL, 0); }
		public String_constContext string_const() {
			return GetRuleContext<String_constContext>(0);
		}
		public Bool_constContext bool_const() {
			return GetRuleContext<Bool_constContext>(0);
		}
		public Int_constContext int_const() {
			return GetRuleContext<Int_constContext>(0);
		}
		public Double_constContext double_const() {
			return GetRuleContext<Double_constContext>(0);
		}
		public ITerminalNode LBRACE() { return GetToken(QueryParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(QueryParser.RBRACE, 0); }
		public ITerminalNode LBRACK() { return GetToken(QueryParser.LBRACK, 0); }
		public ITerminalNode RBRACK() { return GetToken(QueryParser.RBRACK, 0); }
		public ITerminalNode LT() { return GetToken(QueryParser.LT, 0); }
		public Expr_list_no_gtContext expr_list_no_gt() {
			return GetRuleContext<Expr_list_no_gtContext>(0);
		}
		public ITerminalNode GT() { return GetToken(QueryParser.GT, 0); }
		public Cond_exprContext cond_expr() {
			return GetRuleContext<Cond_exprContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public Term_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term_expr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Term_exprContext term_expr() {
		Term_exprContext _localctx = new Term_exprContext(Context, State);
		EnterRule(_localctx, 48, RULE_term_expr);
		int _la;
		try {
			State = 303;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 270; identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 271; identifier();
				State = 272; Match(LPAREN);
				State = 274;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << LPAREN) | (1L << LBRACE) | (1L << LBRACK) | (1L << LT) | (1L << NOT) | (1L << SUB) | (1L << ID) | (1L << INT) | (1L << TRUE) | (1L << FALSE) | (1L << DOUBLE) | (1L << STRING))) != 0)) {
					{
					State = 273; expr_list(0);
					}
				}

				State = 276; Match(RPAREN);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 278; identifier();
				State = 279; Match(LPAREN);
				State = 280; Match(MUL);
				State = 281; Match(RPAREN);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 283; string_const();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 284; bool_const();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 285; int_const();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 286; double_const();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 287; Match(LBRACE);
				State = 288; Match(RBRACE);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 289; Match(LBRACK);
				State = 290; Match(RBRACK);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 291; Match(LT);
				State = 292; expr_list_no_gt(0);
				State = 293; Match(GT);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 295; Match(LPAREN);
				State = 296; cond_expr(0);
				State = 297; Match(RPAREN);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 299; Match(LPAREN);
				State = 300; statement();
				State = 301; Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(QueryParser.ID, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 50, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 305; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_constContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(QueryParser.STRING, 0); }
		public String_constContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_const; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_const(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public String_constContext string_const() {
		String_constContext _localctx = new String_constContext(Context, State);
		EnterRule(_localctx, 52, RULE_string_const);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 307; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bool_constContext : ParserRuleContext {
		public ITerminalNode TRUE() { return GetToken(QueryParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(QueryParser.FALSE, 0); }
		public Bool_constContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool_const; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBool_const(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bool_constContext bool_const() {
		Bool_constContext _localctx = new Bool_constContext(Context, State);
		EnterRule(_localctx, 54, RULE_bool_const);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 309;
			_la = TokenStream.LA(1);
			if ( !(_la==TRUE || _la==FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Int_constContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(QueryParser.INT, 0); }
		public Int_constContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int_const; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInt_const(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Int_constContext int_const() {
		Int_constContext _localctx = new Int_constContext(Context, State);
		EnterRule(_localctx, 56, RULE_int_const);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 311; Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Double_constContext : ParserRuleContext {
		public ITerminalNode DOUBLE() { return GetToken(QueryParser.DOUBLE, 0); }
		public Double_constContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_double_const; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDouble_const(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Double_constContext double_const() {
		Double_constContext _localctx = new Double_constContext(Context, State);
		EnterRule(_localctx, 58, RULE_double_const);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 313; Match(DOUBLE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_list_optContext : ParserRuleContext {
		public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		public Expr_list_optContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_list_opt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_list_opt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expr_list_optContext expr_list_opt() {
		Expr_list_optContext _localctx = new Expr_list_optContext(Context, State);
		EnterRule(_localctx, 60, RULE_expr_list_opt);
		try {
			State = 317;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Eof:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case T__0:
			case LPAREN:
			case LBRACE:
			case LBRACK:
			case LT:
			case NOT:
			case SUB:
			case ID:
			case INT:
			case TRUE:
			case FALSE:
			case DOUBLE:
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 316; expr_list(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_listContext : ParserRuleContext {
		public Cond_exprContext cond_expr() {
			return GetRuleContext<Cond_exprContext>(0);
		}
		public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(QueryParser.COMMA, 0); }
		public Expr_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_list; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expr_listContext expr_list() {
		return expr_list(0);
	}

	private Expr_listContext expr_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Expr_listContext _localctx = new Expr_listContext(Context, _parentState);
		Expr_listContext _prevctx = _localctx;
		int _startState = 62;
		EnterRecursionRule(_localctx, 62, RULE_expr_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 320; cond_expr(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 327;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Expr_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_expr_list);
					State = 322;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 323; Match(COMMA);
					State = 324; cond_expr(0);
					}
					} 
				}
				State = 329;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Expr_list_no_gtContext : ParserRuleContext {
		public Cond_expr_no_gtContext cond_expr_no_gt() {
			return GetRuleContext<Cond_expr_no_gtContext>(0);
		}
		public Expr_list_no_gtContext expr_list_no_gt() {
			return GetRuleContext<Expr_list_no_gtContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(QueryParser.COMMA, 0); }
		public Expr_list_no_gtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_list_no_gt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_list_no_gt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expr_list_no_gtContext expr_list_no_gt() {
		return expr_list_no_gt(0);
	}

	private Expr_list_no_gtContext expr_list_no_gt(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Expr_list_no_gtContext _localctx = new Expr_list_no_gtContext(Context, _parentState);
		Expr_list_no_gtContext _prevctx = _localctx;
		int _startState = 64;
		EnterRecursionRule(_localctx, 64, RULE_expr_list_no_gt, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 331; cond_expr_no_gt(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 338;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Expr_list_no_gtContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_expr_list_no_gt);
					State = 333;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 334; Match(COMMA);
					State = 335; cond_expr_no_gt(0);
					}
					} 
				}
				State = 340;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Rel_opContext : ParserRuleContext {
		public Rel_op_no_gtContext rel_op_no_gt() {
			return GetRuleContext<Rel_op_no_gtContext>(0);
		}
		public ITerminalNode GT() { return GetToken(QueryParser.GT, 0); }
		public Rel_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rel_op; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRel_op(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rel_opContext rel_op() {
		Rel_opContext _localctx = new Rel_opContext(Context, State);
		EnterRule(_localctx, 66, RULE_rel_op);
		try {
			State = 343;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LT:
			case EQ:
			case NEQ:
			case LE:
			case GE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 341; rel_op_no_gt();
				}
				break;
			case GT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 342; Match(GT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rel_op_no_gtContext : ParserRuleContext {
		public ITerminalNode EQ() { return GetToken(QueryParser.EQ, 0); }
		public ITerminalNode NEQ() { return GetToken(QueryParser.NEQ, 0); }
		public ITerminalNode LT() { return GetToken(QueryParser.LT, 0); }
		public ITerminalNode LE() { return GetToken(QueryParser.LE, 0); }
		public ITerminalNode GE() { return GetToken(QueryParser.GE, 0); }
		public Rel_op_no_gtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rel_op_no_gt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRel_op_no_gt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rel_op_no_gtContext rel_op_no_gt() {
		Rel_op_no_gtContext _localctx = new Rel_op_no_gtContext(Context, State);
		EnterRule(_localctx, 68, RULE_rel_op_no_gt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 345;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LT) | (1L << EQ) | (1L << NEQ) | (1L << LE) | (1L << GE))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ErrorContext : ParserRuleContext {
		public ErrorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_error; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitError(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ErrorContext error() {
		ErrorContext _localctx = new ErrorContext(Context, State);
		EnterRule(_localctx, 70, RULE_error);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 347; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return statement_list_sempred((Statement_listContext)_localctx, predIndex);
		case 5: return order_list_sempred((Order_listContext)_localctx, predIndex);
		case 9: return sel_list_sempred((Sel_listContext)_localctx, predIndex);
		case 13: return cond_expr_sempred((Cond_exprContext)_localctx, predIndex);
		case 14: return cond_expr_no_gt_sempred((Cond_expr_no_gtContext)_localctx, predIndex);
		case 15: return and_expr_sempred((And_exprContext)_localctx, predIndex);
		case 16: return and_expr_no_gt_sempred((And_expr_no_gtContext)_localctx, predIndex);
		case 21: return basic_expr_sempred((Basic_exprContext)_localctx, predIndex);
		case 22: return fact_expr_sempred((Fact_exprContext)_localctx, predIndex);
		case 31: return expr_list_sempred((Expr_listContext)_localctx, predIndex);
		case 32: return expr_list_no_gt_sempred((Expr_list_no_gtContext)_localctx, predIndex);
		}
		return true;
	}
	private bool statement_list_sempred(Statement_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}
	private bool order_list_sempred(Order_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 2);
		}
		return true;
	}
	private bool sel_list_sempred(Sel_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 2);
		}
		return true;
	}
	private bool cond_expr_sempred(Cond_exprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 3);
		}
		return true;
	}
	private bool cond_expr_no_gt_sempred(Cond_expr_no_gtContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(Context, 3);
		}
		return true;
	}
	private bool and_expr_sempred(And_exprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(Context, 2);
		}
		return true;
	}
	private bool and_expr_no_gt_sempred(And_expr_no_gtContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return Precpred(Context, 2);
		}
		return true;
	}
	private bool basic_expr_sempred(Basic_exprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return Precpred(Context, 3);
		case 8: return Precpred(Context, 2);
		}
		return true;
	}
	private bool fact_expr_sempred(Fact_exprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9: return Precpred(Context, 4);
		case 10: return Precpred(Context, 3);
		case 11: return Precpred(Context, 2);
		}
		return true;
	}
	private bool expr_list_sempred(Expr_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 12: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expr_list_no_gt_sempred(Expr_list_no_gtContext _localctx, int predIndex) {
		switch (predIndex) {
		case 13: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '-', '\x160', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\a', '\x3', 'S', '\n', '\x3', '\f', '\x3', 
		'\xE', '\x3', 'V', '\v', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x5', '\x4', '[', '\n', '\x4', '\x3', '\x4', '\x5', '\x4', '^', '\n', 
		'\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', '\a', 'm', '\n', '\a', '\f', 
		'\a', '\xE', '\a', 'p', '\v', '\a', '\x3', '\b', '\x3', '\b', '\x5', '\b', 
		't', '\n', '\b', '\x3', '\b', '\x5', '\b', 'w', '\n', '\b', '\x3', '\t', 
		'\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', 
		'\n', '\x7F', '\n', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\a', '\v', '\x87', '\n', '\v', '\f', 
		'\v', '\xE', '\v', '\x8A', '\v', '\v', '\x3', '\f', '\x5', '\f', '\x8D', 
		'\n', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\x91', '\n', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\x97', 
		'\n', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\xA0', '\n', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\a', '\xF', '\xA5', '\n', '\xF', 
		'\f', '\xF', '\xE', '\xF', '\xA8', '\v', '\xF', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x5', '\x10', '\xAD', '\n', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\a', '\x10', '\xB2', '\n', '\x10', '\f', 
		'\x10', '\xE', '\x10', '\xB5', '\v', '\x10', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\a', '\x11', 
		'\xBD', '\n', '\x11', '\f', '\x11', '\xE', '\x11', '\xC0', '\v', '\x11', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\a', '\x12', '\xC8', '\n', '\x12', '\f', '\x12', '\xE', 
		'\x12', '\xCB', '\v', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x5', '\x13', '\xD0', '\n', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x5', '\x14', '\xD5', '\n', '\x14', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\xE0', '\n', '\x15', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x5', '\x16', '\xEB', 
		'\n', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\a', '\x17', '\xF6', '\n', '\x17', '\f', '\x17', '\xE', '\x17', '\xF9', 
		'\v', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\a', '\x18', '\x107', '\n', 
		'\x18', '\f', '\x18', '\xE', '\x18', '\x10A', '\v', '\x18', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x5', '\x19', '\x10F', '\n', '\x19', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x115', 
		'\n', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x132', '\n', 
		'\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1F', '\x3', 
		'\x1F', '\x3', ' ', '\x3', ' ', '\x5', ' ', '\x140', '\n', ' ', '\x3', 
		'!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\a', 
		'!', '\x148', '\n', '!', '\f', '!', '\xE', '!', '\x14B', '\v', '!', '\x3', 
		'\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', 
		'\a', '\"', '\x153', '\n', '\"', '\f', '\"', '\xE', '\"', '\x156', '\v', 
		'\"', '\x3', '#', '\x3', '#', '\x5', '#', '\x15A', '\n', '#', '\x3', '$', 
		'\x3', '$', '\x3', '%', '\x3', '%', '\x3', '%', '\x2', '\r', '\x4', '\f', 
		'\x14', '\x1C', '\x1E', ' ', '\"', ',', '.', '@', '\x42', '&', '\x2', 
		'\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', 
		'\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', 
		'\x30', '\x32', '\x34', '\x36', '\x38', ':', '<', '>', '@', '\x42', '\x44', 
		'\x46', 'H', '\x2', '\x6', '\x3', '\x2', '\a', '\b', '\x4', '\x2', '\r', 
		'\r', '\xF', '\xF', '\x3', '\x2', ')', '*', '\x4', '\x2', '\x1C', '\x1C', 
		'\x1E', '!', '\x2', '\x168', '\x2', 'J', '\x3', '\x2', '\x2', '\x2', '\x4', 
		'L', '\x3', '\x2', '\x2', '\x2', '\x6', 'W', '\x3', '\x2', '\x2', '\x2', 
		'\b', '_', '\x3', '\x2', '\x2', '\x2', '\n', '\x62', '\x3', '\x2', '\x2', 
		'\x2', '\f', '\x66', '\x3', '\x2', '\x2', '\x2', '\xE', 'q', '\x3', '\x2', 
		'\x2', '\x2', '\x10', 'x', '\x3', '\x2', '\x2', '\x2', '\x12', '~', '\x3', 
		'\x2', '\x2', '\x2', '\x14', '\x80', '\x3', '\x2', '\x2', '\x2', '\x16', 
		'\x96', '\x3', '\x2', '\x2', '\x2', '\x18', '\x98', '\x3', '\x2', '\x2', 
		'\x2', '\x1A', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x9F', '\x3', 
		'\x2', '\x2', '\x2', '\x1E', '\xAC', '\x3', '\x2', '\x2', '\x2', ' ', 
		'\xB6', '\x3', '\x2', '\x2', '\x2', '\"', '\xC1', '\x3', '\x2', '\x2', 
		'\x2', '$', '\xCF', '\x3', '\x2', '\x2', '\x2', '&', '\xD4', '\x3', '\x2', 
		'\x2', '\x2', '(', '\xDF', '\x3', '\x2', '\x2', '\x2', '*', '\xEA', '\x3', 
		'\x2', '\x2', '\x2', ',', '\xEC', '\x3', '\x2', '\x2', '\x2', '.', '\xFA', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '\x10E', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\x131', '\x3', '\x2', '\x2', '\x2', '\x34', '\x133', '\x3', '\x2', 
		'\x2', '\x2', '\x36', '\x135', '\x3', '\x2', '\x2', '\x2', '\x38', '\x137', 
		'\x3', '\x2', '\x2', '\x2', ':', '\x139', '\x3', '\x2', '\x2', '\x2', 
		'<', '\x13B', '\x3', '\x2', '\x2', '\x2', '>', '\x13F', '\x3', '\x2', 
		'\x2', '\x2', '@', '\x141', '\x3', '\x2', '\x2', '\x2', '\x42', '\x14C', 
		'\x3', '\x2', '\x2', '\x2', '\x44', '\x159', '\x3', '\x2', '\x2', '\x2', 
		'\x46', '\x15B', '\x3', '\x2', '\x2', '\x2', 'H', '\x15D', '\x3', '\x2', 
		'\x2', '\x2', 'J', 'K', '\x5', '\x4', '\x3', '\x2', 'K', '\x3', '\x3', 
		'\x2', '\x2', '\x2', 'L', 'M', '\b', '\x3', '\x1', '\x2', 'M', 'N', '\x5', 
		'\x6', '\x4', '\x2', 'N', 'T', '\x3', '\x2', '\x2', '\x2', 'O', 'P', '\f', 
		'\x4', '\x2', '\x2', 'P', 'Q', '\a', '\x19', '\x2', '\x2', 'Q', 'S', '\x5', 
		'\x6', '\x4', '\x2', 'R', 'O', '\x3', '\x2', '\x2', '\x2', 'S', 'V', '\x3', 
		'\x2', '\x2', '\x2', 'T', 'R', '\x3', '\x2', '\x2', '\x2', 'T', 'U', '\x3', 
		'\x2', '\x2', '\x2', 'U', '\x5', '\x3', '\x2', '\x2', '\x2', 'V', 'T', 
		'\x3', '\x2', '\x2', '\x2', 'W', 'X', '\a', '\x4', '\x2', '\x2', 'X', 
		'Z', '\x5', '\x14', '\v', '\x2', 'Y', '[', '\x5', '\b', '\x5', '\x2', 
		'Z', 'Y', '\x3', '\x2', '\x2', '\x2', 'Z', '[', '\x3', '\x2', '\x2', '\x2', 
		'[', ']', '\x3', '\x2', '\x2', '\x2', '\\', '^', '\x5', '\n', '\x6', '\x2', 
		']', '\\', '\x3', '\x2', '\x2', '\x2', ']', '^', '\x3', '\x2', '\x2', 
		'\x2', '^', '\a', '\x3', '\x2', '\x2', '\x2', '_', '`', '\a', '\t', '\x2', 
		'\x2', '`', '\x61', '\x5', '\x1C', '\xF', '\x2', '\x61', '\t', '\x3', 
		'\x2', '\x2', '\x2', '\x62', '\x63', '\a', '\x5', '\x2', '\x2', '\x63', 
		'\x64', '\a', '\x6', '\x2', '\x2', '\x64', '\x65', '\x5', '\f', '\a', 
		'\x2', '\x65', '\v', '\x3', '\x2', '\x2', '\x2', '\x66', 'g', '\b', '\a', 
		'\x1', '\x2', 'g', 'h', '\x5', '\xE', '\b', '\x2', 'h', 'n', '\x3', '\x2', 
		'\x2', '\x2', 'i', 'j', '\f', '\x4', '\x2', '\x2', 'j', 'k', '\a', '\x1A', 
		'\x2', '\x2', 'k', 'm', '\x5', '\xE', '\b', '\x2', 'l', 'i', '\x3', '\x2', 
		'\x2', '\x2', 'm', 'p', '\x3', '\x2', '\x2', '\x2', 'n', 'l', '\x3', '\x2', 
		'\x2', '\x2', 'n', 'o', '\x3', '\x2', '\x2', '\x2', 'o', '\r', '\x3', 
		'\x2', '\x2', '\x2', 'p', 'n', '\x3', '\x2', '\x2', '\x2', 'q', 's', '\x5', 
		'\x1C', '\xF', '\x2', 'r', 't', '\x5', '\x10', '\t', '\x2', 's', 'r', 
		'\x3', '\x2', '\x2', '\x2', 's', 't', '\x3', '\x2', '\x2', '\x2', 't', 
		'v', '\x3', '\x2', '\x2', '\x2', 'u', 'w', '\x5', '\x12', '\n', '\x2', 
		'v', 'u', '\x3', '\x2', '\x2', '\x2', 'v', 'w', '\x3', '\x2', '\x2', '\x2', 
		'w', '\xF', '\x3', '\x2', '\x2', '\x2', 'x', 'y', '\t', '\x2', '\x2', 
		'\x2', 'y', '\x11', '\x3', '\x2', '\x2', '\x2', 'z', '{', '\a', '\f', 
		'\x2', '\x2', '{', '\x7F', '\a', '\n', '\x2', '\x2', '|', '}', '\a', '\f', 
		'\x2', '\x2', '}', '\x7F', '\a', '\v', '\x2', '\x2', '~', 'z', '\x3', 
		'\x2', '\x2', '\x2', '~', '|', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x13', 
		'\x3', '\x2', '\x2', '\x2', '\x80', '\x81', '\b', '\v', '\x1', '\x2', 
		'\x81', '\x82', '\x5', '\x16', '\f', '\x2', '\x82', '\x88', '\x3', '\x2', 
		'\x2', '\x2', '\x83', '\x84', '\f', '\x4', '\x2', '\x2', '\x84', '\x85', 
		'\a', '\x1A', '\x2', '\x2', '\x85', '\x87', '\x5', '\x16', '\f', '\x2', 
		'\x86', '\x83', '\x3', '\x2', '\x2', '\x2', '\x87', '\x8A', '\x3', '\x2', 
		'\x2', '\x2', '\x88', '\x86', '\x3', '\x2', '\x2', '\x2', '\x88', '\x89', 
		'\x3', '\x2', '\x2', '\x2', '\x89', '\x15', '\x3', '\x2', '\x2', '\x2', 
		'\x8A', '\x88', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x8D', '\x5', '\x18', 
		'\r', '\x2', '\x8C', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8D', 
		'\x3', '\x2', '\x2', '\x2', '\x8D', '\x8E', '\x3', '\x2', '\x2', '\x2', 
		'\x8E', '\x97', '\x5', '\x1A', '\xE', '\x2', '\x8F', '\x91', '\x5', '\x18', 
		'\r', '\x2', '\x90', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x90', '\x91', 
		'\x3', '\x2', '\x2', '\x2', '\x91', '\x92', '\x3', '\x2', '\x2', '\x2', 
		'\x92', '\x93', '\x5', '\x1A', '\xE', '\x2', '\x93', '\x94', '\a', '\xE', 
		'\x2', '\x2', '\x94', '\x95', '\x5', '\x34', '\x1B', '\x2', '\x95', '\x97', 
		'\x3', '\x2', '\x2', '\x2', '\x96', '\x8C', '\x3', '\x2', '\x2', '\x2', 
		'\x96', '\x90', '\x3', '\x2', '\x2', '\x2', '\x97', '\x17', '\x3', '\x2', 
		'\x2', '\x2', '\x98', '\x99', '\t', '\x3', '\x2', '\x2', '\x99', '\x19', 
		'\x3', '\x2', '\x2', '\x2', '\x9A', '\x9B', '\x5', '\x1C', '\xF', '\x2', 
		'\x9B', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x9D', '\b', '\xF', 
		'\x1', '\x2', '\x9D', '\xA0', '\x5', ' ', '\x11', '\x2', '\x9E', '\xA0', 
		'\x5', 'H', '%', '\x2', '\x9F', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x9F', 
		'\x9E', '\x3', '\x2', '\x2', '\x2', '\xA0', '\xA6', '\x3', '\x2', '\x2', 
		'\x2', '\xA1', '\xA2', '\f', '\x5', '\x2', '\x2', '\xA2', '\xA3', '\a', 
		'\x12', '\x2', '\x2', '\xA3', '\xA5', '\x5', ' ', '\x11', '\x2', '\xA4', 
		'\xA1', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA8', '\x3', '\x2', '\x2', 
		'\x2', '\xA6', '\xA4', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA7', '\x3', 
		'\x2', '\x2', '\x2', '\xA7', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xA8', 
		'\xA6', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xAA', '\b', '\x10', '\x1', 
		'\x2', '\xAA', '\xAD', '\x5', '\"', '\x12', '\x2', '\xAB', '\xAD', '\x5', 
		'H', '%', '\x2', '\xAC', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xAC', '\xAB', 
		'\x3', '\x2', '\x2', '\x2', '\xAD', '\xB3', '\x3', '\x2', '\x2', '\x2', 
		'\xAE', '\xAF', '\f', '\x5', '\x2', '\x2', '\xAF', '\xB0', '\a', '\x12', 
		'\x2', '\x2', '\xB0', '\xB2', '\x5', '\"', '\x12', '\x2', '\xB1', '\xAE', 
		'\x3', '\x2', '\x2', '\x2', '\xB2', '\xB5', '\x3', '\x2', '\x2', '\x2', 
		'\xB3', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB4', '\x3', '\x2', 
		'\x2', '\x2', '\xB4', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB3', 
		'\x3', '\x2', '\x2', '\x2', '\xB6', '\xB7', '\b', '\x11', '\x1', '\x2', 
		'\xB7', '\xB8', '\x5', '$', '\x13', '\x2', '\xB8', '\xBE', '\x3', '\x2', 
		'\x2', '\x2', '\xB9', '\xBA', '\f', '\x4', '\x2', '\x2', '\xBA', '\xBB', 
		'\a', '\x11', '\x2', '\x2', '\xBB', '\xBD', '\x5', '$', '\x13', '\x2', 
		'\xBC', '\xB9', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xC0', '\x3', '\x2', 
		'\x2', '\x2', '\xBE', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xBF', 
		'\x3', '\x2', '\x2', '\x2', '\xBF', '!', '\x3', '\x2', '\x2', '\x2', '\xC0', 
		'\xBE', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xC2', '\b', '\x12', '\x1', 
		'\x2', '\xC2', '\xC3', '\x5', '&', '\x14', '\x2', '\xC3', '\xC9', '\x3', 
		'\x2', '\x2', '\x2', '\xC4', '\xC5', '\f', '\x4', '\x2', '\x2', '\xC5', 
		'\xC6', '\a', '\x11', '\x2', '\x2', '\xC6', '\xC8', '\x5', '&', '\x14', 
		'\x2', '\xC7', '\xC4', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xCB', '\x3', 
		'\x2', '\x2', '\x2', '\xC9', '\xC7', '\x3', '\x2', '\x2', '\x2', '\xC9', 
		'\xCA', '\x3', '\x2', '\x2', '\x2', '\xCA', '#', '\x3', '\x2', '\x2', 
		'\x2', '\xCB', '\xC9', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xD0', '\x5', 
		'(', '\x15', '\x2', '\xCD', '\xCE', '\a', '\x1D', '\x2', '\x2', '\xCE', 
		'\xD0', '\x5', '$', '\x13', '\x2', '\xCF', '\xCC', '\x3', '\x2', '\x2', 
		'\x2', '\xCF', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xD0', '%', '\x3', 
		'\x2', '\x2', '\x2', '\xD1', '\xD5', '\x5', '*', '\x16', '\x2', '\xD2', 
		'\xD3', '\a', '\x1D', '\x2', '\x2', '\xD3', '\xD5', '\x5', '&', '\x14', 
		'\x2', '\xD4', '\xD1', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xD2', '\x3', 
		'\x2', '\x2', '\x2', '\xD5', '\'', '\x3', '\x2', '\x2', '\x2', '\xD6', 
		'\xD7', '\x5', ',', '\x17', '\x2', '\xD7', '\xD8', '\x5', '\x44', '#', 
		'\x2', '\xD8', '\xD9', '\x5', ',', '\x17', '\x2', '\xD9', '\xE0', '\x3', 
		'\x2', '\x2', '\x2', '\xDA', '\xDB', '\x5', ',', '\x17', '\x2', '\xDB', 
		'\xDC', '\a', '\x10', '\x2', '\x2', '\xDC', '\xDD', '\x5', '\x36', '\x1C', 
		'\x2', '\xDD', '\xE0', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xE0', '\x5', 
		',', '\x17', '\x2', '\xDF', '\xD6', '\x3', '\x2', '\x2', '\x2', '\xDF', 
		'\xDA', '\x3', '\x2', '\x2', '\x2', '\xDF', '\xDE', '\x3', '\x2', '\x2', 
		'\x2', '\xE0', ')', '\x3', '\x2', '\x2', '\x2', '\xE1', '\xE2', '\x5', 
		',', '\x17', '\x2', '\xE2', '\xE3', '\x5', '\x46', '$', '\x2', '\xE3', 
		'\xE4', '\x5', ',', '\x17', '\x2', '\xE4', '\xEB', '\x3', '\x2', '\x2', 
		'\x2', '\xE5', '\xE6', '\x5', ',', '\x17', '\x2', '\xE6', '\xE7', '\a', 
		'\x10', '\x2', '\x2', '\xE7', '\xE8', '\x5', '\x36', '\x1C', '\x2', '\xE8', 
		'\xEB', '\x3', '\x2', '\x2', '\x2', '\xE9', '\xEB', '\x5', ',', '\x17', 
		'\x2', '\xEA', '\xE1', '\x3', '\x2', '\x2', '\x2', '\xEA', '\xE5', '\x3', 
		'\x2', '\x2', '\x2', '\xEA', '\xE9', '\x3', '\x2', '\x2', '\x2', '\xEB', 
		'+', '\x3', '\x2', '\x2', '\x2', '\xEC', '\xED', '\b', '\x17', '\x1', 
		'\x2', '\xED', '\xEE', '\x5', '.', '\x18', '\x2', '\xEE', '\xF7', '\x3', 
		'\x2', '\x2', '\x2', '\xEF', '\xF0', '\f', '\x5', '\x2', '\x2', '\xF0', 
		'\xF1', '\a', '\"', '\x2', '\x2', '\xF1', '\xF6', '\x5', '.', '\x18', 
		'\x2', '\xF2', '\xF3', '\f', '\x4', '\x2', '\x2', '\xF3', '\xF4', '\a', 
		'#', '\x2', '\x2', '\xF4', '\xF6', '\x5', '.', '\x18', '\x2', '\xF5', 
		'\xEF', '\x3', '\x2', '\x2', '\x2', '\xF5', '\xF2', '\x3', '\x2', '\x2', 
		'\x2', '\xF6', '\xF9', '\x3', '\x2', '\x2', '\x2', '\xF7', '\xF5', '\x3', 
		'\x2', '\x2', '\x2', '\xF7', '\xF8', '\x3', '\x2', '\x2', '\x2', '\xF8', 
		'-', '\x3', '\x2', '\x2', '\x2', '\xF9', '\xF7', '\x3', '\x2', '\x2', 
		'\x2', '\xFA', '\xFB', '\b', '\x18', '\x1', '\x2', '\xFB', '\xFC', '\x5', 
		'\x30', '\x19', '\x2', '\xFC', '\x108', '\x3', '\x2', '\x2', '\x2', '\xFD', 
		'\xFE', '\f', '\x6', '\x2', '\x2', '\xFE', '\xFF', '\a', '$', '\x2', '\x2', 
		'\xFF', '\x107', '\x5', '\x30', '\x19', '\x2', '\x100', '\x101', '\f', 
		'\x5', '\x2', '\x2', '\x101', '\x102', '\a', '%', '\x2', '\x2', '\x102', 
		'\x107', '\x5', '\x30', '\x19', '\x2', '\x103', '\x104', '\f', '\x4', 
		'\x2', '\x2', '\x104', '\x105', '\a', '&', '\x2', '\x2', '\x105', '\x107', 
		'\x5', '\x30', '\x19', '\x2', '\x106', '\xFD', '\x3', '\x2', '\x2', '\x2', 
		'\x106', '\x100', '\x3', '\x2', '\x2', '\x2', '\x106', '\x103', '\x3', 
		'\x2', '\x2', '\x2', '\x107', '\x10A', '\x3', '\x2', '\x2', '\x2', '\x108', 
		'\x106', '\x3', '\x2', '\x2', '\x2', '\x108', '\x109', '\x3', '\x2', '\x2', 
		'\x2', '\x109', '/', '\x3', '\x2', '\x2', '\x2', '\x10A', '\x108', '\x3', 
		'\x2', '\x2', '\x2', '\x10B', '\x10C', '\a', '#', '\x2', '\x2', '\x10C', 
		'\x10F', '\x5', '\x30', '\x19', '\x2', '\x10D', '\x10F', '\x5', '\x32', 
		'\x1A', '\x2', '\x10E', '\x10B', '\x3', '\x2', '\x2', '\x2', '\x10E', 
		'\x10D', '\x3', '\x2', '\x2', '\x2', '\x10F', '\x31', '\x3', '\x2', '\x2', 
		'\x2', '\x110', '\x132', '\x5', '\x34', '\x1B', '\x2', '\x111', '\x112', 
		'\x5', '\x34', '\x1B', '\x2', '\x112', '\x114', '\a', '\x13', '\x2', '\x2', 
		'\x113', '\x115', '\x5', '@', '!', '\x2', '\x114', '\x113', '\x3', '\x2', 
		'\x2', '\x2', '\x114', '\x115', '\x3', '\x2', '\x2', '\x2', '\x115', '\x116', 
		'\x3', '\x2', '\x2', '\x2', '\x116', '\x117', '\a', '\x14', '\x2', '\x2', 
		'\x117', '\x132', '\x3', '\x2', '\x2', '\x2', '\x118', '\x119', '\x5', 
		'\x34', '\x1B', '\x2', '\x119', '\x11A', '\a', '\x13', '\x2', '\x2', '\x11A', 
		'\x11B', '\a', '$', '\x2', '\x2', '\x11B', '\x11C', '\a', '\x14', '\x2', 
		'\x2', '\x11C', '\x132', '\x3', '\x2', '\x2', '\x2', '\x11D', '\x132', 
		'\x5', '\x36', '\x1C', '\x2', '\x11E', '\x132', '\x5', '\x38', '\x1D', 
		'\x2', '\x11F', '\x132', '\x5', ':', '\x1E', '\x2', '\x120', '\x132', 
		'\x5', '<', '\x1F', '\x2', '\x121', '\x122', '\a', '\x15', '\x2', '\x2', 
		'\x122', '\x132', '\a', '\x16', '\x2', '\x2', '\x123', '\x124', '\a', 
		'\x17', '\x2', '\x2', '\x124', '\x132', '\a', '\x18', '\x2', '\x2', '\x125', 
		'\x126', '\a', '\x1C', '\x2', '\x2', '\x126', '\x127', '\x5', '\x42', 
		'\"', '\x2', '\x127', '\x128', '\a', '\x1B', '\x2', '\x2', '\x128', '\x132', 
		'\x3', '\x2', '\x2', '\x2', '\x129', '\x12A', '\a', '\x13', '\x2', '\x2', 
		'\x12A', '\x12B', '\x5', '\x1C', '\xF', '\x2', '\x12B', '\x12C', '\a', 
		'\x14', '\x2', '\x2', '\x12C', '\x132', '\x3', '\x2', '\x2', '\x2', '\x12D', 
		'\x12E', '\a', '\x13', '\x2', '\x2', '\x12E', '\x12F', '\x5', '\x6', '\x4', 
		'\x2', '\x12F', '\x130', '\a', '\x14', '\x2', '\x2', '\x130', '\x132', 
		'\x3', '\x2', '\x2', '\x2', '\x131', '\x110', '\x3', '\x2', '\x2', '\x2', 
		'\x131', '\x111', '\x3', '\x2', '\x2', '\x2', '\x131', '\x118', '\x3', 
		'\x2', '\x2', '\x2', '\x131', '\x11D', '\x3', '\x2', '\x2', '\x2', '\x131', 
		'\x11E', '\x3', '\x2', '\x2', '\x2', '\x131', '\x11F', '\x3', '\x2', '\x2', 
		'\x2', '\x131', '\x120', '\x3', '\x2', '\x2', '\x2', '\x131', '\x121', 
		'\x3', '\x2', '\x2', '\x2', '\x131', '\x123', '\x3', '\x2', '\x2', '\x2', 
		'\x131', '\x125', '\x3', '\x2', '\x2', '\x2', '\x131', '\x129', '\x3', 
		'\x2', '\x2', '\x2', '\x131', '\x12D', '\x3', '\x2', '\x2', '\x2', '\x132', 
		'\x33', '\x3', '\x2', '\x2', '\x2', '\x133', '\x134', '\a', '\'', '\x2', 
		'\x2', '\x134', '\x35', '\x3', '\x2', '\x2', '\x2', '\x135', '\x136', 
		'\a', '-', '\x2', '\x2', '\x136', '\x37', '\x3', '\x2', '\x2', '\x2', 
		'\x137', '\x138', '\t', '\x4', '\x2', '\x2', '\x138', '\x39', '\x3', '\x2', 
		'\x2', '\x2', '\x139', '\x13A', '\a', '(', '\x2', '\x2', '\x13A', ';', 
		'\x3', '\x2', '\x2', '\x2', '\x13B', '\x13C', '\a', '+', '\x2', '\x2', 
		'\x13C', '=', '\x3', '\x2', '\x2', '\x2', '\x13D', '\x140', '\x3', '\x2', 
		'\x2', '\x2', '\x13E', '\x140', '\x5', '@', '!', '\x2', '\x13F', '\x13D', 
		'\x3', '\x2', '\x2', '\x2', '\x13F', '\x13E', '\x3', '\x2', '\x2', '\x2', 
		'\x140', '?', '\x3', '\x2', '\x2', '\x2', '\x141', '\x142', '\b', '!', 
		'\x1', '\x2', '\x142', '\x143', '\x5', '\x1C', '\xF', '\x2', '\x143', 
		'\x149', '\x3', '\x2', '\x2', '\x2', '\x144', '\x145', '\f', '\x3', '\x2', 
		'\x2', '\x145', '\x146', '\a', '\x1A', '\x2', '\x2', '\x146', '\x148', 
		'\x5', '\x1C', '\xF', '\x2', '\x147', '\x144', '\x3', '\x2', '\x2', '\x2', 
		'\x148', '\x14B', '\x3', '\x2', '\x2', '\x2', '\x149', '\x147', '\x3', 
		'\x2', '\x2', '\x2', '\x149', '\x14A', '\x3', '\x2', '\x2', '\x2', '\x14A', 
		'\x41', '\x3', '\x2', '\x2', '\x2', '\x14B', '\x149', '\x3', '\x2', '\x2', 
		'\x2', '\x14C', '\x14D', '\b', '\"', '\x1', '\x2', '\x14D', '\x14E', '\x5', 
		'\x1E', '\x10', '\x2', '\x14E', '\x154', '\x3', '\x2', '\x2', '\x2', '\x14F', 
		'\x150', '\f', '\x3', '\x2', '\x2', '\x150', '\x151', '\a', '\x1A', '\x2', 
		'\x2', '\x151', '\x153', '\x5', '\x1E', '\x10', '\x2', '\x152', '\x14F', 
		'\x3', '\x2', '\x2', '\x2', '\x153', '\x156', '\x3', '\x2', '\x2', '\x2', 
		'\x154', '\x152', '\x3', '\x2', '\x2', '\x2', '\x154', '\x155', '\x3', 
		'\x2', '\x2', '\x2', '\x155', '\x43', '\x3', '\x2', '\x2', '\x2', '\x156', 
		'\x154', '\x3', '\x2', '\x2', '\x2', '\x157', '\x15A', '\x5', '\x46', 
		'$', '\x2', '\x158', '\x15A', '\a', '\x1B', '\x2', '\x2', '\x159', '\x157', 
		'\x3', '\x2', '\x2', '\x2', '\x159', '\x158', '\x3', '\x2', '\x2', '\x2', 
		'\x15A', '\x45', '\x3', '\x2', '\x2', '\x2', '\x15B', '\x15C', '\t', '\x5', 
		'\x2', '\x2', '\x15C', 'G', '\x3', '\x2', '\x2', '\x2', '\x15D', '\x15E', 
		'\a', '\x3', '\x2', '\x2', '\x15E', 'I', '\x3', '\x2', '\x2', '\x2', '\"', 
		'T', 'Z', ']', 'n', 's', 'v', '~', '\x88', '\x8C', '\x90', '\x96', '\x9F', 
		'\xA6', '\xAC', '\xB3', '\xBE', '\xC9', '\xCF', '\xD4', '\xDF', '\xEA', 
		'\xF5', '\xF7', '\x106', '\x108', '\x10E', '\x114', '\x131', '\x13F', 
		'\x149', '\x154', '\x159',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
