//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Query.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
//[System.CLSCompliant(false)]
public partial class QueryParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, SELECT=2, ORDER=3, BY=4, ASC=5, DESC=6, WHERE=7, FIRST=8, LAST=9, 
		NULLS=10, ALL=11, AS=12, DISTINCT=13, REGEXP=14, AND=15, OR=16, LPAREN=17, 
		RPAREN=18, LBRACE=19, RBRACE=20, LBRACK=21, RBRACK=22, SEMI=23, COMMA=24, 
		GT=25, LT=26, NOT=27, EQ=28, NEQ=29, LE=30, GE=31, ADD=32, SUB=33, MUL=34, 
		DIV=35, MOD=36, ID=37, INT=38, TRUE=39, FALSE=40, DOUBLE=41, WHITESPACE=42, 
		STRING=43;
	public const int
		RULE_program = 0, RULE_statement = 1, RULE_where_clause = 2, RULE_order_by_clause = 3, 
		RULE_order_item = 4, RULE_order = 5, RULE_nulls = 6, RULE_sel_item = 7, 
		RULE_sel_modifier = 8, RULE_cond_expr = 9, RULE_cond_expr_no_gt = 10, 
		RULE_and_expr = 11, RULE_and_expr_no_gt = 12, RULE_not_expr = 13, RULE_not_expr_no_gt = 14, 
		RULE_bool_expr = 15, RULE_bool_expr_no_gt = 16, RULE_basic_expr = 17, 
		RULE_fact_expr = 18, RULE_neg_expr = 19, RULE_term_expr = 20, RULE_identifier = 21, 
		RULE_string_const = 22, RULE_bool_const = 23, RULE_int_const = 24, RULE_double_const = 25, 
		RULE_expr_list = 26, RULE_expr_list_no_gt = 27, RULE_rel_op = 28, RULE_rel_op_no_gt = 29, 
		RULE_error = 30;
	public static readonly string[] ruleNames = {
		"program", "statement", "where_clause", "order_by_clause", "order_item", 
		"order", "nulls", "sel_item", "sel_modifier", "cond_expr", "cond_expr_no_gt", 
		"and_expr", "and_expr_no_gt", "not_expr", "not_expr_no_gt", "bool_expr", 
		"bool_expr_no_gt", "basic_expr", "fact_expr", "neg_expr", "term_expr", 
		"identifier", "string_const", "bool_const", "int_const", "double_const", 
		"expr_list", "expr_list_no_gt", "rel_op", "rel_op_no_gt", "error"
	};

	private static readonly string[] _LiteralNames = {
		null, "'error'", "'SELECT'", "'ORDER'", "'BY'", "'ASC'", "'DESC'", "'WHERE'", 
		"'FIRST'", "'LAST'", "'NULLS'", "'ALL'", "'AS'", "'DISTINCT'", "'REGEXP'", 
		null, null, "'('", "')'", "'{'", "'}'", "'['", "']'", "';'", "','", "'>'", 
		"'<'", "'!'", "'=='", "'!='", "'<='", "'>='", "'+'", "'-'", "'*'", "'/'", 
		"'%'", null, null, "'true'", "'false'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "SELECT", "ORDER", "BY", "ASC", "DESC", "WHERE", "FIRST", 
		"LAST", "NULLS", "ALL", "AS", "DISTINCT", "REGEXP", "AND", "OR", "LPAREN", 
		"RPAREN", "LBRACE", "RBRACE", "LBRACK", "RBRACK", "SEMI", "COMMA", "GT", 
		"LT", "NOT", "EQ", "NEQ", "LE", "GE", "ADD", "SUB", "MUL", "DIV", "MOD", 
		"ID", "INT", "TRUE", "FALSE", "DOUBLE", "WHITESPACE", "STRING"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Query.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static QueryParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public QueryParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public QueryParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ITerminalNode[] SEMI() { return GetTokens(QueryParser.SEMI); }
		public ITerminalNode SEMI(int i) {
			return GetToken(QueryParser.SEMI, i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62; statement();
			State = 67;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEMI) {
				{
				{
				State = 63; Match(SEMI);
				State = 64; statement();
				}
				}
				State = 69;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public ITerminalNode SELECT() { return GetToken(QueryParser.SELECT, 0); }
		public Sel_itemContext[] sel_item() {
			return GetRuleContexts<Sel_itemContext>();
		}
		public Sel_itemContext sel_item(int i) {
			return GetRuleContext<Sel_itemContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(QueryParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(QueryParser.COMMA, i);
		}
		public Where_clauseContext where_clause() {
			return GetRuleContext<Where_clauseContext>(0);
		}
		public Order_by_clauseContext order_by_clause() {
			return GetRuleContext<Order_by_clauseContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70; Match(SELECT);
			State = 71; sel_item();
			State = 76;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 72; Match(COMMA);
				State = 73; sel_item();
				}
				}
				State = 78;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 80;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 79; where_clause();
				}
			}

			State = 83;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER) {
				{
				State = 82; order_by_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Where_clauseContext : ParserRuleContext {
		public ITerminalNode WHERE() { return GetToken(QueryParser.WHERE, 0); }
		public Cond_exprContext cond_expr() {
			return GetRuleContext<Cond_exprContext>(0);
		}
		public Where_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_where_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhere_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Where_clauseContext where_clause() {
		Where_clauseContext _localctx = new Where_clauseContext(Context, State);
		EnterRule(_localctx, 4, RULE_where_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85; Match(WHERE);
			State = 86; cond_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Order_by_clauseContext : ParserRuleContext {
		public ITerminalNode ORDER() { return GetToken(QueryParser.ORDER, 0); }
		public ITerminalNode BY() { return GetToken(QueryParser.BY, 0); }
		public Order_itemContext[] order_item() {
			return GetRuleContexts<Order_itemContext>();
		}
		public Order_itemContext order_item(int i) {
			return GetRuleContext<Order_itemContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(QueryParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(QueryParser.COMMA, i);
		}
		public Order_by_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order_by_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrder_by_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Order_by_clauseContext order_by_clause() {
		Order_by_clauseContext _localctx = new Order_by_clauseContext(Context, State);
		EnterRule(_localctx, 6, RULE_order_by_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88; Match(ORDER);
			State = 89; Match(BY);
			State = 90; order_item();
			State = 95;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 91; Match(COMMA);
				State = 92; order_item();
				}
				}
				State = 97;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Order_itemContext : ParserRuleContext {
		public Cond_exprContext cond_expr() {
			return GetRuleContext<Cond_exprContext>(0);
		}
		public OrderContext order() {
			return GetRuleContext<OrderContext>(0);
		}
		public NullsContext nulls() {
			return GetRuleContext<NullsContext>(0);
		}
		public Order_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order_item; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrder_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Order_itemContext order_item() {
		Order_itemContext _localctx = new Order_itemContext(Context, State);
		EnterRule(_localctx, 8, RULE_order_item);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98; cond_expr();
			State = 100;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				State = 99; order();
				}
			}

			State = 103;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NULLS) {
				{
				State = 102; nulls();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderContext : ParserRuleContext {
		public ITerminalNode ASC() { return GetToken(QueryParser.ASC, 0); }
		public ITerminalNode DESC() { return GetToken(QueryParser.DESC, 0); }
		public OrderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrder(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderContext order() {
		OrderContext _localctx = new OrderContext(Context, State);
		EnterRule(_localctx, 10, RULE_order);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105;
			_la = TokenStream.LA(1);
			if ( !(_la==ASC || _la==DESC) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullsContext : ParserRuleContext {
		public ITerminalNode NULLS() { return GetToken(QueryParser.NULLS, 0); }
		public ITerminalNode FIRST() { return GetToken(QueryParser.FIRST, 0); }
		public ITerminalNode LAST() { return GetToken(QueryParser.LAST, 0); }
		public NullsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nulls; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNulls(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullsContext nulls() {
		NullsContext _localctx = new NullsContext(Context, State);
		EnterRule(_localctx, 12, RULE_nulls);
		try {
			State = 111;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 107; Match(NULLS);
				State = 108; Match(FIRST);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 109; Match(NULLS);
				State = 110; Match(LAST);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sel_itemContext : ParserRuleContext {
		public Cond_exprContext cond_expr() {
			return GetRuleContext<Cond_exprContext>(0);
		}
		public Sel_modifierContext sel_modifier() {
			return GetRuleContext<Sel_modifierContext>(0);
		}
		public ITerminalNode AS() { return GetToken(QueryParser.AS, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Sel_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sel_item; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sel_itemContext sel_item() {
		Sel_itemContext _localctx = new Sel_itemContext(Context, State);
		EnterRule(_localctx, 14, RULE_sel_item);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				State = 113; sel_modifier();
				}
			}

			State = 116; cond_expr();
			State = 119;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 117; Match(AS);
				State = 118; identifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sel_modifierContext : ParserRuleContext {
		public ITerminalNode ALL() { return GetToken(QueryParser.ALL, 0); }
		public ITerminalNode DISTINCT() { return GetToken(QueryParser.DISTINCT, 0); }
		public Sel_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sel_modifier; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSel_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sel_modifierContext sel_modifier() {
		Sel_modifierContext _localctx = new Sel_modifierContext(Context, State);
		EnterRule(_localctx, 16, RULE_sel_modifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121;
			_la = TokenStream.LA(1);
			if ( !(_la==ALL || _la==DISTINCT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cond_exprContext : ParserRuleContext {
		public And_exprContext[] and_expr() {
			return GetRuleContexts<And_exprContext>();
		}
		public And_exprContext and_expr(int i) {
			return GetRuleContext<And_exprContext>(i);
		}
		public ITerminalNode[] OR() { return GetTokens(QueryParser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(QueryParser.OR, i);
		}
		public ErrorContext error() {
			return GetRuleContext<ErrorContext>(0);
		}
		public Cond_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cond_expr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCond_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cond_exprContext cond_expr() {
		Cond_exprContext _localctx = new Cond_exprContext(Context, State);
		EnterRule(_localctx, 18, RULE_cond_expr);
		int _la;
		try {
			State = 132;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAREN:
			case LBRACE:
			case LBRACK:
			case LT:
			case NOT:
			case SUB:
			case ID:
			case INT:
			case TRUE:
			case FALSE:
			case DOUBLE:
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 123; and_expr();
				State = 128;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==OR) {
					{
					{
					State = 124; Match(OR);
					State = 125; and_expr();
					}
					}
					State = 130;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case T__0:
				EnterOuterAlt(_localctx, 2);
				{
				State = 131; error();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cond_expr_no_gtContext : ParserRuleContext {
		public And_expr_no_gtContext[] and_expr_no_gt() {
			return GetRuleContexts<And_expr_no_gtContext>();
		}
		public And_expr_no_gtContext and_expr_no_gt(int i) {
			return GetRuleContext<And_expr_no_gtContext>(i);
		}
		public ITerminalNode[] OR() { return GetTokens(QueryParser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(QueryParser.OR, i);
		}
		public ErrorContext error() {
			return GetRuleContext<ErrorContext>(0);
		}
		public Cond_expr_no_gtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cond_expr_no_gt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCond_expr_no_gt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cond_expr_no_gtContext cond_expr_no_gt() {
		Cond_expr_no_gtContext _localctx = new Cond_expr_no_gtContext(Context, State);
		EnterRule(_localctx, 20, RULE_cond_expr_no_gt);
		int _la;
		try {
			State = 143;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAREN:
			case LBRACE:
			case LBRACK:
			case LT:
			case NOT:
			case SUB:
			case ID:
			case INT:
			case TRUE:
			case FALSE:
			case DOUBLE:
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 134; and_expr_no_gt();
				State = 139;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==OR) {
					{
					{
					State = 135; Match(OR);
					State = 136; and_expr_no_gt();
					}
					}
					State = 141;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case T__0:
				EnterOuterAlt(_localctx, 2);
				{
				State = 142; error();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class And_exprContext : ParserRuleContext {
		public Not_exprContext[] not_expr() {
			return GetRuleContexts<Not_exprContext>();
		}
		public Not_exprContext not_expr(int i) {
			return GetRuleContext<Not_exprContext>(i);
		}
		public ITerminalNode[] AND() { return GetTokens(QueryParser.AND); }
		public ITerminalNode AND(int i) {
			return GetToken(QueryParser.AND, i);
		}
		public And_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_and_expr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnd_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public And_exprContext and_expr() {
		And_exprContext _localctx = new And_exprContext(Context, State);
		EnterRule(_localctx, 22, RULE_and_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145; not_expr();
			State = 150;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AND) {
				{
				{
				State = 146; Match(AND);
				State = 147; not_expr();
				}
				}
				State = 152;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class And_expr_no_gtContext : ParserRuleContext {
		public Not_expr_no_gtContext[] not_expr_no_gt() {
			return GetRuleContexts<Not_expr_no_gtContext>();
		}
		public Not_expr_no_gtContext not_expr_no_gt(int i) {
			return GetRuleContext<Not_expr_no_gtContext>(i);
		}
		public ITerminalNode[] AND() { return GetTokens(QueryParser.AND); }
		public ITerminalNode AND(int i) {
			return GetToken(QueryParser.AND, i);
		}
		public And_expr_no_gtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_and_expr_no_gt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnd_expr_no_gt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public And_expr_no_gtContext and_expr_no_gt() {
		And_expr_no_gtContext _localctx = new And_expr_no_gtContext(Context, State);
		EnterRule(_localctx, 24, RULE_and_expr_no_gt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153; not_expr_no_gt();
			State = 158;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AND) {
				{
				{
				State = 154; Match(AND);
				State = 155; not_expr_no_gt();
				}
				}
				State = 160;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Not_exprContext : ParserRuleContext {
		public Bool_exprContext bool_expr() {
			return GetRuleContext<Bool_exprContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(QueryParser.NOT, 0); }
		public Not_exprContext not_expr() {
			return GetRuleContext<Not_exprContext>(0);
		}
		public Not_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_not_expr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNot_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Not_exprContext not_expr() {
		Not_exprContext _localctx = new Not_exprContext(Context, State);
		EnterRule(_localctx, 26, RULE_not_expr);
		try {
			State = 164;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAREN:
			case LBRACE:
			case LBRACK:
			case LT:
			case SUB:
			case ID:
			case INT:
			case TRUE:
			case FALSE:
			case DOUBLE:
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 161; bool_expr();
				}
				break;
			case NOT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 162; Match(NOT);
				State = 163; not_expr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Not_expr_no_gtContext : ParserRuleContext {
		public Bool_expr_no_gtContext bool_expr_no_gt() {
			return GetRuleContext<Bool_expr_no_gtContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(QueryParser.NOT, 0); }
		public Not_expr_no_gtContext not_expr_no_gt() {
			return GetRuleContext<Not_expr_no_gtContext>(0);
		}
		public Not_expr_no_gtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_not_expr_no_gt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNot_expr_no_gt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Not_expr_no_gtContext not_expr_no_gt() {
		Not_expr_no_gtContext _localctx = new Not_expr_no_gtContext(Context, State);
		EnterRule(_localctx, 28, RULE_not_expr_no_gt);
		try {
			State = 169;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAREN:
			case LBRACE:
			case LBRACK:
			case LT:
			case SUB:
			case ID:
			case INT:
			case TRUE:
			case FALSE:
			case DOUBLE:
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 166; bool_expr_no_gt();
				}
				break;
			case NOT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 167; Match(NOT);
				State = 168; not_expr_no_gt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bool_exprContext : ParserRuleContext {
		public Basic_exprContext[] basic_expr() {
			return GetRuleContexts<Basic_exprContext>();
		}
		public Basic_exprContext basic_expr(int i) {
			return GetRuleContext<Basic_exprContext>(i);
		}
		public Rel_opContext rel_op() {
			return GetRuleContext<Rel_opContext>(0);
		}
		public ITerminalNode REGEXP() { return GetToken(QueryParser.REGEXP, 0); }
		public String_constContext string_const() {
			return GetRuleContext<String_constContext>(0);
		}
		public Bool_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool_expr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBool_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bool_exprContext bool_expr() {
		Bool_exprContext _localctx = new Bool_exprContext(Context, State);
		EnterRule(_localctx, 30, RULE_bool_expr);
		try {
			State = 180;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 171; basic_expr(0);
				State = 172; rel_op();
				State = 173; basic_expr(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 175; basic_expr(0);
				State = 176; Match(REGEXP);
				State = 177; string_const();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 179; basic_expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bool_expr_no_gtContext : ParserRuleContext {
		public Basic_exprContext[] basic_expr() {
			return GetRuleContexts<Basic_exprContext>();
		}
		public Basic_exprContext basic_expr(int i) {
			return GetRuleContext<Basic_exprContext>(i);
		}
		public Rel_op_no_gtContext rel_op_no_gt() {
			return GetRuleContext<Rel_op_no_gtContext>(0);
		}
		public ITerminalNode REGEXP() { return GetToken(QueryParser.REGEXP, 0); }
		public String_constContext string_const() {
			return GetRuleContext<String_constContext>(0);
		}
		public Bool_expr_no_gtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool_expr_no_gt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBool_expr_no_gt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bool_expr_no_gtContext bool_expr_no_gt() {
		Bool_expr_no_gtContext _localctx = new Bool_expr_no_gtContext(Context, State);
		EnterRule(_localctx, 32, RULE_bool_expr_no_gt);
		try {
			State = 191;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 182; basic_expr(0);
				State = 183; rel_op_no_gt();
				State = 184; basic_expr(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 186; basic_expr(0);
				State = 187; Match(REGEXP);
				State = 188; string_const();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 190; basic_expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Basic_exprContext : ParserRuleContext {
		public Fact_exprContext fact_expr() {
			return GetRuleContext<Fact_exprContext>(0);
		}
		public Basic_exprContext basic_expr() {
			return GetRuleContext<Basic_exprContext>(0);
		}
		public ITerminalNode ADD() { return GetToken(QueryParser.ADD, 0); }
		public ITerminalNode SUB() { return GetToken(QueryParser.SUB, 0); }
		public Basic_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basic_expr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBasic_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Basic_exprContext basic_expr() {
		return basic_expr(0);
	}

	private Basic_exprContext basic_expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Basic_exprContext _localctx = new Basic_exprContext(Context, _parentState);
		Basic_exprContext _prevctx = _localctx;
		int _startState = 34;
		EnterRecursionRule(_localctx, 34, RULE_basic_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 194; fact_expr(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 204;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 202;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
					case 1:
						{
						_localctx = new Basic_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_basic_expr);
						State = 196;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 197; Match(ADD);
						State = 198; fact_expr(0);
						}
						break;
					case 2:
						{
						_localctx = new Basic_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_basic_expr);
						State = 199;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 200; Match(SUB);
						State = 201; fact_expr(0);
						}
						break;
					}
					} 
				}
				State = 206;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Fact_exprContext : ParserRuleContext {
		public Neg_exprContext neg_expr() {
			return GetRuleContext<Neg_exprContext>(0);
		}
		public Fact_exprContext fact_expr() {
			return GetRuleContext<Fact_exprContext>(0);
		}
		public ITerminalNode MUL() { return GetToken(QueryParser.MUL, 0); }
		public ITerminalNode DIV() { return GetToken(QueryParser.DIV, 0); }
		public ITerminalNode MOD() { return GetToken(QueryParser.MOD, 0); }
		public Fact_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fact_expr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFact_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fact_exprContext fact_expr() {
		return fact_expr(0);
	}

	private Fact_exprContext fact_expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Fact_exprContext _localctx = new Fact_exprContext(Context, _parentState);
		Fact_exprContext _prevctx = _localctx;
		int _startState = 36;
		EnterRecursionRule(_localctx, 36, RULE_fact_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 208; neg_expr();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 221;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 219;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
					case 1:
						{
						_localctx = new Fact_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_fact_expr);
						State = 210;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 211; Match(MUL);
						State = 212; neg_expr();
						}
						break;
					case 2:
						{
						_localctx = new Fact_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_fact_expr);
						State = 213;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 214; Match(DIV);
						State = 215; neg_expr();
						}
						break;
					case 3:
						{
						_localctx = new Fact_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_fact_expr);
						State = 216;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 217; Match(MOD);
						State = 218; neg_expr();
						}
						break;
					}
					} 
				}
				State = 223;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Neg_exprContext : ParserRuleContext {
		public ITerminalNode SUB() { return GetToken(QueryParser.SUB, 0); }
		public Neg_exprContext neg_expr() {
			return GetRuleContext<Neg_exprContext>(0);
		}
		public Term_exprContext term_expr() {
			return GetRuleContext<Term_exprContext>(0);
		}
		public Neg_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_neg_expr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNeg_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Neg_exprContext neg_expr() {
		Neg_exprContext _localctx = new Neg_exprContext(Context, State);
		EnterRule(_localctx, 38, RULE_neg_expr);
		try {
			State = 227;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SUB:
				EnterOuterAlt(_localctx, 1);
				{
				State = 224; Match(SUB);
				State = 225; neg_expr();
				}
				break;
			case LPAREN:
			case LBRACE:
			case LBRACK:
			case LT:
			case ID:
			case INT:
			case TRUE:
			case FALSE:
			case DOUBLE:
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 226; term_expr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Term_exprContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(QueryParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(QueryParser.RPAREN, 0); }
		public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		public ITerminalNode MUL() { return GetToken(QueryParser.MUL, 0); }
		public String_constContext string_const() {
			return GetRuleContext<String_constContext>(0);
		}
		public Bool_constContext bool_const() {
			return GetRuleContext<Bool_constContext>(0);
		}
		public Int_constContext int_const() {
			return GetRuleContext<Int_constContext>(0);
		}
		public Double_constContext double_const() {
			return GetRuleContext<Double_constContext>(0);
		}
		public ITerminalNode LBRACE() { return GetToken(QueryParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(QueryParser.RBRACE, 0); }
		public ITerminalNode LBRACK() { return GetToken(QueryParser.LBRACK, 0); }
		public ITerminalNode RBRACK() { return GetToken(QueryParser.RBRACK, 0); }
		public ITerminalNode LT() { return GetToken(QueryParser.LT, 0); }
		public Expr_list_no_gtContext expr_list_no_gt() {
			return GetRuleContext<Expr_list_no_gtContext>(0);
		}
		public ITerminalNode GT() { return GetToken(QueryParser.GT, 0); }
		public Cond_exprContext cond_expr() {
			return GetRuleContext<Cond_exprContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public Term_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term_expr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Term_exprContext term_expr() {
		Term_exprContext _localctx = new Term_exprContext(Context, State);
		EnterRule(_localctx, 40, RULE_term_expr);
		int _la;
		try {
			State = 262;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 229; identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 230; identifier();
				State = 231; Match(LPAREN);
				State = 233;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << LPAREN) | (1L << LBRACE) | (1L << LBRACK) | (1L << LT) | (1L << NOT) | (1L << SUB) | (1L << ID) | (1L << INT) | (1L << TRUE) | (1L << FALSE) | (1L << DOUBLE) | (1L << STRING))) != 0)) {
					{
					State = 232; expr_list();
					}
				}

				State = 235; Match(RPAREN);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 237; identifier();
				State = 238; Match(LPAREN);
				State = 239; Match(MUL);
				State = 240; Match(RPAREN);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 242; string_const();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 243; bool_const();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 244; int_const();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 245; double_const();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 246; Match(LBRACE);
				State = 247; Match(RBRACE);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 248; Match(LBRACK);
				State = 249; Match(RBRACK);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 250; Match(LT);
				State = 251; expr_list_no_gt();
				State = 252; Match(GT);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 254; Match(LPAREN);
				State = 255; cond_expr();
				State = 256; Match(RPAREN);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 258; Match(LPAREN);
				State = 259; statement();
				State = 260; Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(QueryParser.ID, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 42, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 264; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_constContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(QueryParser.STRING, 0); }
		public String_constContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_const; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_const(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public String_constContext string_const() {
		String_constContext _localctx = new String_constContext(Context, State);
		EnterRule(_localctx, 44, RULE_string_const);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 266; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bool_constContext : ParserRuleContext {
		public ITerminalNode TRUE() { return GetToken(QueryParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(QueryParser.FALSE, 0); }
		public Bool_constContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool_const; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBool_const(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bool_constContext bool_const() {
		Bool_constContext _localctx = new Bool_constContext(Context, State);
		EnterRule(_localctx, 46, RULE_bool_const);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 268;
			_la = TokenStream.LA(1);
			if ( !(_la==TRUE || _la==FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Int_constContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(QueryParser.INT, 0); }
		public Int_constContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int_const; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInt_const(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Int_constContext int_const() {
		Int_constContext _localctx = new Int_constContext(Context, State);
		EnterRule(_localctx, 48, RULE_int_const);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 270; Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Double_constContext : ParserRuleContext {
		public ITerminalNode DOUBLE() { return GetToken(QueryParser.DOUBLE, 0); }
		public Double_constContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_double_const; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDouble_const(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Double_constContext double_const() {
		Double_constContext _localctx = new Double_constContext(Context, State);
		EnterRule(_localctx, 50, RULE_double_const);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 272; Match(DOUBLE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_listContext : ParserRuleContext {
		public Cond_exprContext[] cond_expr() {
			return GetRuleContexts<Cond_exprContext>();
		}
		public Cond_exprContext cond_expr(int i) {
			return GetRuleContext<Cond_exprContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(QueryParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(QueryParser.COMMA, i);
		}
		public Expr_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_list; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expr_listContext expr_list() {
		Expr_listContext _localctx = new Expr_listContext(Context, State);
		EnterRule(_localctx, 52, RULE_expr_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 274; cond_expr();
			State = 279;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 275; Match(COMMA);
				State = 276; cond_expr();
				}
				}
				State = 281;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_list_no_gtContext : ParserRuleContext {
		public Cond_expr_no_gtContext[] cond_expr_no_gt() {
			return GetRuleContexts<Cond_expr_no_gtContext>();
		}
		public Cond_expr_no_gtContext cond_expr_no_gt(int i) {
			return GetRuleContext<Cond_expr_no_gtContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(QueryParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(QueryParser.COMMA, i);
		}
		public Expr_list_no_gtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_list_no_gt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_list_no_gt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expr_list_no_gtContext expr_list_no_gt() {
		Expr_list_no_gtContext _localctx = new Expr_list_no_gtContext(Context, State);
		EnterRule(_localctx, 54, RULE_expr_list_no_gt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 282; cond_expr_no_gt();
			State = 287;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 283; Match(COMMA);
				State = 284; cond_expr_no_gt();
				}
				}
				State = 289;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rel_opContext : ParserRuleContext {
		public Rel_op_no_gtContext rel_op_no_gt() {
			return GetRuleContext<Rel_op_no_gtContext>(0);
		}
		public ITerminalNode GT() { return GetToken(QueryParser.GT, 0); }
		public Rel_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rel_op; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRel_op(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rel_opContext rel_op() {
		Rel_opContext _localctx = new Rel_opContext(Context, State);
		EnterRule(_localctx, 56, RULE_rel_op);
		try {
			State = 292;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LT:
			case EQ:
			case NEQ:
			case LE:
			case GE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 290; rel_op_no_gt();
				}
				break;
			case GT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 291; Match(GT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rel_op_no_gtContext : ParserRuleContext {
		public ITerminalNode EQ() { return GetToken(QueryParser.EQ, 0); }
		public ITerminalNode NEQ() { return GetToken(QueryParser.NEQ, 0); }
		public ITerminalNode LT() { return GetToken(QueryParser.LT, 0); }
		public ITerminalNode LE() { return GetToken(QueryParser.LE, 0); }
		public ITerminalNode GE() { return GetToken(QueryParser.GE, 0); }
		public Rel_op_no_gtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rel_op_no_gt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRel_op_no_gt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rel_op_no_gtContext rel_op_no_gt() {
		Rel_op_no_gtContext _localctx = new Rel_op_no_gtContext(Context, State);
		EnterRule(_localctx, 58, RULE_rel_op_no_gt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 294;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LT) | (1L << EQ) | (1L << NEQ) | (1L << LE) | (1L << GE))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ErrorContext : ParserRuleContext {
		public ErrorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_error; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitError(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ErrorContext error() {
		ErrorContext _localctx = new ErrorContext(Context, State);
		EnterRule(_localctx, 60, RULE_error);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 296; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 17: return basic_expr_sempred((Basic_exprContext)_localctx, predIndex);
		case 18: return fact_expr_sempred((Fact_exprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool basic_expr_sempred(Basic_exprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		case 1: return Precpred(Context, 2);
		}
		return true;
	}
	private bool fact_expr_sempred(Fact_exprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 4);
		case 3: return Precpred(Context, 3);
		case 4: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '-', '\x12D', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', 
		'\x44', '\n', '\x2', '\f', '\x2', '\xE', '\x2', 'G', '\v', '\x2', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', 'M', '\n', 
		'\x3', '\f', '\x3', '\xE', '\x3', 'P', '\v', '\x3', '\x3', '\x3', '\x5', 
		'\x3', 'S', '\n', '\x3', '\x3', '\x3', '\x5', '\x3', 'V', '\n', '\x3', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', '`', '\n', '\x5', 
		'\f', '\x5', '\xE', '\x5', '\x63', '\v', '\x5', '\x3', '\x6', '\x3', '\x6', 
		'\x5', '\x6', 'g', '\n', '\x6', '\x3', '\x6', '\x5', '\x6', 'j', '\n', 
		'\x6', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x5', '\b', 'r', '\n', '\b', '\x3', '\t', '\x5', '\t', 'u', 
		'\n', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', 'z', '\n', 
		'\t', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\a', '\v', '\x81', '\n', '\v', '\f', '\v', '\xE', '\v', '\x84', '\v', 
		'\v', '\x3', '\v', '\x5', '\v', '\x87', '\n', '\v', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\a', '\f', '\x8C', '\n', '\f', '\f', '\f', '\xE', 
		'\f', '\x8F', '\v', '\f', '\x3', '\f', '\x5', '\f', '\x92', '\n', '\f', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\a', '\r', '\x97', '\n', '\r', 
		'\f', '\r', '\xE', '\r', '\x9A', '\v', '\r', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\a', '\xE', '\x9F', '\n', '\xE', '\f', '\xE', '\xE', '\xE', 
		'\xA2', '\v', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', 
		'\xF', '\xA7', '\n', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x5', '\x10', '\xAC', '\n', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x5', '\x11', '\xB7', '\n', '\x11', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\xC2', '\n', 
		'\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\a', 
		'\x13', '\xCD', '\n', '\x13', '\f', '\x13', '\xE', '\x13', '\xD0', '\v', 
		'\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\a', '\x14', '\xDE', '\n', '\x14', 
		'\f', '\x14', '\xE', '\x14', '\xE1', '\v', '\x14', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x5', '\x15', '\xE6', '\n', '\x15', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x5', '\x16', '\xEC', '\n', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x5', '\x16', '\x109', '\n', '\x16', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\a', '\x1C', '\x118', '\n', 
		'\x1C', '\f', '\x1C', '\xE', '\x1C', '\x11B', '\v', '\x1C', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\a', '\x1D', '\x120', '\n', '\x1D', '\f', 
		'\x1D', '\xE', '\x1D', '\x123', '\v', '\x1D', '\x3', '\x1E', '\x3', '\x1E', 
		'\x5', '\x1E', '\x127', '\n', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', 
		' ', '\x3', ' ', '\x3', ' ', '\x2', '\x4', '$', '&', '!', '\x2', '\x4', 
		'\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', 
		'\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', 
		'\x32', '\x34', '\x36', '\x38', ':', '<', '>', '\x2', '\x6', '\x3', '\x2', 
		'\a', '\b', '\x4', '\x2', '\r', '\r', '\xF', '\xF', '\x3', '\x2', ')', 
		'*', '\x4', '\x2', '\x1C', '\x1C', '\x1E', '!', '\x2', '\x138', '\x2', 
		'@', '\x3', '\x2', '\x2', '\x2', '\x4', 'H', '\x3', '\x2', '\x2', '\x2', 
		'\x6', 'W', '\x3', '\x2', '\x2', '\x2', '\b', 'Z', '\x3', '\x2', '\x2', 
		'\x2', '\n', '\x64', '\x3', '\x2', '\x2', '\x2', '\f', 'k', '\x3', '\x2', 
		'\x2', '\x2', '\xE', 'q', '\x3', '\x2', '\x2', '\x2', '\x10', 't', '\x3', 
		'\x2', '\x2', '\x2', '\x12', '{', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'\x86', '\x3', '\x2', '\x2', '\x2', '\x16', '\x91', '\x3', '\x2', '\x2', 
		'\x2', '\x18', '\x93', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x9B', '\x3', 
		'\x2', '\x2', '\x2', '\x1C', '\xA6', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		'\xAB', '\x3', '\x2', '\x2', '\x2', ' ', '\xB6', '\x3', '\x2', '\x2', 
		'\x2', '\"', '\xC1', '\x3', '\x2', '\x2', '\x2', '$', '\xC3', '\x3', '\x2', 
		'\x2', '\x2', '&', '\xD1', '\x3', '\x2', '\x2', '\x2', '(', '\xE5', '\x3', 
		'\x2', '\x2', '\x2', '*', '\x108', '\x3', '\x2', '\x2', '\x2', ',', '\x10A', 
		'\x3', '\x2', '\x2', '\x2', '.', '\x10C', '\x3', '\x2', '\x2', '\x2', 
		'\x30', '\x10E', '\x3', '\x2', '\x2', '\x2', '\x32', '\x110', '\x3', '\x2', 
		'\x2', '\x2', '\x34', '\x112', '\x3', '\x2', '\x2', '\x2', '\x36', '\x114', 
		'\x3', '\x2', '\x2', '\x2', '\x38', '\x11C', '\x3', '\x2', '\x2', '\x2', 
		':', '\x126', '\x3', '\x2', '\x2', '\x2', '<', '\x128', '\x3', '\x2', 
		'\x2', '\x2', '>', '\x12A', '\x3', '\x2', '\x2', '\x2', '@', '\x45', '\x5', 
		'\x4', '\x3', '\x2', '\x41', '\x42', '\a', '\x19', '\x2', '\x2', '\x42', 
		'\x44', '\x5', '\x4', '\x3', '\x2', '\x43', '\x41', '\x3', '\x2', '\x2', 
		'\x2', '\x44', 'G', '\x3', '\x2', '\x2', '\x2', '\x45', '\x43', '\x3', 
		'\x2', '\x2', '\x2', '\x45', '\x46', '\x3', '\x2', '\x2', '\x2', '\x46', 
		'\x3', '\x3', '\x2', '\x2', '\x2', 'G', '\x45', '\x3', '\x2', '\x2', '\x2', 
		'H', 'I', '\a', '\x4', '\x2', '\x2', 'I', 'N', '\x5', '\x10', '\t', '\x2', 
		'J', 'K', '\a', '\x1A', '\x2', '\x2', 'K', 'M', '\x5', '\x10', '\t', '\x2', 
		'L', 'J', '\x3', '\x2', '\x2', '\x2', 'M', 'P', '\x3', '\x2', '\x2', '\x2', 
		'N', 'L', '\x3', '\x2', '\x2', '\x2', 'N', 'O', '\x3', '\x2', '\x2', '\x2', 
		'O', 'R', '\x3', '\x2', '\x2', '\x2', 'P', 'N', '\x3', '\x2', '\x2', '\x2', 
		'Q', 'S', '\x5', '\x6', '\x4', '\x2', 'R', 'Q', '\x3', '\x2', '\x2', '\x2', 
		'R', 'S', '\x3', '\x2', '\x2', '\x2', 'S', 'U', '\x3', '\x2', '\x2', '\x2', 
		'T', 'V', '\x5', '\b', '\x5', '\x2', 'U', 'T', '\x3', '\x2', '\x2', '\x2', 
		'U', 'V', '\x3', '\x2', '\x2', '\x2', 'V', '\x5', '\x3', '\x2', '\x2', 
		'\x2', 'W', 'X', '\a', '\t', '\x2', '\x2', 'X', 'Y', '\x5', '\x14', '\v', 
		'\x2', 'Y', '\a', '\x3', '\x2', '\x2', '\x2', 'Z', '[', '\a', '\x5', '\x2', 
		'\x2', '[', '\\', '\a', '\x6', '\x2', '\x2', '\\', '\x61', '\x5', '\n', 
		'\x6', '\x2', ']', '^', '\a', '\x1A', '\x2', '\x2', '^', '`', '\x5', '\n', 
		'\x6', '\x2', '_', ']', '\x3', '\x2', '\x2', '\x2', '`', '\x63', '\x3', 
		'\x2', '\x2', '\x2', '\x61', '_', '\x3', '\x2', '\x2', '\x2', '\x61', 
		'\x62', '\x3', '\x2', '\x2', '\x2', '\x62', '\t', '\x3', '\x2', '\x2', 
		'\x2', '\x63', '\x61', '\x3', '\x2', '\x2', '\x2', '\x64', '\x66', '\x5', 
		'\x14', '\v', '\x2', '\x65', 'g', '\x5', '\f', '\a', '\x2', '\x66', '\x65', 
		'\x3', '\x2', '\x2', '\x2', '\x66', 'g', '\x3', '\x2', '\x2', '\x2', 'g', 
		'i', '\x3', '\x2', '\x2', '\x2', 'h', 'j', '\x5', '\xE', '\b', '\x2', 
		'i', 'h', '\x3', '\x2', '\x2', '\x2', 'i', 'j', '\x3', '\x2', '\x2', '\x2', 
		'j', '\v', '\x3', '\x2', '\x2', '\x2', 'k', 'l', '\t', '\x2', '\x2', '\x2', 
		'l', '\r', '\x3', '\x2', '\x2', '\x2', 'm', 'n', '\a', '\f', '\x2', '\x2', 
		'n', 'r', '\a', '\n', '\x2', '\x2', 'o', 'p', '\a', '\f', '\x2', '\x2', 
		'p', 'r', '\a', '\v', '\x2', '\x2', 'q', 'm', '\x3', '\x2', '\x2', '\x2', 
		'q', 'o', '\x3', '\x2', '\x2', '\x2', 'r', '\xF', '\x3', '\x2', '\x2', 
		'\x2', 's', 'u', '\x5', '\x12', '\n', '\x2', 't', 's', '\x3', '\x2', '\x2', 
		'\x2', 't', 'u', '\x3', '\x2', '\x2', '\x2', 'u', 'v', '\x3', '\x2', '\x2', 
		'\x2', 'v', 'y', '\x5', '\x14', '\v', '\x2', 'w', 'x', '\a', '\xE', '\x2', 
		'\x2', 'x', 'z', '\x5', ',', '\x17', '\x2', 'y', 'w', '\x3', '\x2', '\x2', 
		'\x2', 'y', 'z', '\x3', '\x2', '\x2', '\x2', 'z', '\x11', '\x3', '\x2', 
		'\x2', '\x2', '{', '|', '\t', '\x3', '\x2', '\x2', '|', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '}', '\x82', '\x5', '\x18', '\r', '\x2', '~', '\x7F', 
		'\a', '\x12', '\x2', '\x2', '\x7F', '\x81', '\x5', '\x18', '\r', '\x2', 
		'\x80', '~', '\x3', '\x2', '\x2', '\x2', '\x81', '\x84', '\x3', '\x2', 
		'\x2', '\x2', '\x82', '\x80', '\x3', '\x2', '\x2', '\x2', '\x82', '\x83', 
		'\x3', '\x2', '\x2', '\x2', '\x83', '\x87', '\x3', '\x2', '\x2', '\x2', 
		'\x84', '\x82', '\x3', '\x2', '\x2', '\x2', '\x85', '\x87', '\x5', '>', 
		' ', '\x2', '\x86', '}', '\x3', '\x2', '\x2', '\x2', '\x86', '\x85', '\x3', 
		'\x2', '\x2', '\x2', '\x87', '\x15', '\x3', '\x2', '\x2', '\x2', '\x88', 
		'\x8D', '\x5', '\x1A', '\xE', '\x2', '\x89', '\x8A', '\a', '\x12', '\x2', 
		'\x2', '\x8A', '\x8C', '\x5', '\x1A', '\xE', '\x2', '\x8B', '\x89', '\x3', 
		'\x2', '\x2', '\x2', '\x8C', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x8D', 
		'\x8B', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x8E', '\x3', '\x2', '\x2', 
		'\x2', '\x8E', '\x92', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x8D', '\x3', 
		'\x2', '\x2', '\x2', '\x90', '\x92', '\x5', '>', ' ', '\x2', '\x91', '\x88', 
		'\x3', '\x2', '\x2', '\x2', '\x91', '\x90', '\x3', '\x2', '\x2', '\x2', 
		'\x92', '\x17', '\x3', '\x2', '\x2', '\x2', '\x93', '\x98', '\x5', '\x1C', 
		'\xF', '\x2', '\x94', '\x95', '\a', '\x11', '\x2', '\x2', '\x95', '\x97', 
		'\x5', '\x1C', '\xF', '\x2', '\x96', '\x94', '\x3', '\x2', '\x2', '\x2', 
		'\x97', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x98', '\x96', '\x3', '\x2', 
		'\x2', '\x2', '\x98', '\x99', '\x3', '\x2', '\x2', '\x2', '\x99', '\x19', 
		'\x3', '\x2', '\x2', '\x2', '\x9A', '\x98', '\x3', '\x2', '\x2', '\x2', 
		'\x9B', '\xA0', '\x5', '\x1E', '\x10', '\x2', '\x9C', '\x9D', '\a', '\x11', 
		'\x2', '\x2', '\x9D', '\x9F', '\x5', '\x1E', '\x10', '\x2', '\x9E', '\x9C', 
		'\x3', '\x2', '\x2', '\x2', '\x9F', '\xA2', '\x3', '\x2', '\x2', '\x2', 
		'\xA0', '\x9E', '\x3', '\x2', '\x2', '\x2', '\xA0', '\xA1', '\x3', '\x2', 
		'\x2', '\x2', '\xA1', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA0', 
		'\x3', '\x2', '\x2', '\x2', '\xA3', '\xA7', '\x5', ' ', '\x11', '\x2', 
		'\xA4', '\xA5', '\a', '\x1D', '\x2', '\x2', '\xA5', '\xA7', '\x5', '\x1C', 
		'\xF', '\x2', '\xA6', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA4', 
		'\x3', '\x2', '\x2', '\x2', '\xA7', '\x1D', '\x3', '\x2', '\x2', '\x2', 
		'\xA8', '\xAC', '\x5', '\"', '\x12', '\x2', '\xA9', '\xAA', '\a', '\x1D', 
		'\x2', '\x2', '\xAA', '\xAC', '\x5', '\x1E', '\x10', '\x2', '\xAB', '\xA8', 
		'\x3', '\x2', '\x2', '\x2', '\xAB', '\xA9', '\x3', '\x2', '\x2', '\x2', 
		'\xAC', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xAE', '\x5', '$', 
		'\x13', '\x2', '\xAE', '\xAF', '\x5', ':', '\x1E', '\x2', '\xAF', '\xB0', 
		'\x5', '$', '\x13', '\x2', '\xB0', '\xB7', '\x3', '\x2', '\x2', '\x2', 
		'\xB1', '\xB2', '\x5', '$', '\x13', '\x2', '\xB2', '\xB3', '\a', '\x10', 
		'\x2', '\x2', '\xB3', '\xB4', '\x5', '.', '\x18', '\x2', '\xB4', '\xB7', 
		'\x3', '\x2', '\x2', '\x2', '\xB5', '\xB7', '\x5', '$', '\x13', '\x2', 
		'\xB6', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB1', '\x3', '\x2', 
		'\x2', '\x2', '\xB6', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xB7', '!', 
		'\x3', '\x2', '\x2', '\x2', '\xB8', '\xB9', '\x5', '$', '\x13', '\x2', 
		'\xB9', '\xBA', '\x5', '<', '\x1F', '\x2', '\xBA', '\xBB', '\x5', '$', 
		'\x13', '\x2', '\xBB', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xBD', 
		'\x5', '$', '\x13', '\x2', '\xBD', '\xBE', '\a', '\x10', '\x2', '\x2', 
		'\xBE', '\xBF', '\x5', '.', '\x18', '\x2', '\xBF', '\xC2', '\x3', '\x2', 
		'\x2', '\x2', '\xC0', '\xC2', '\x5', '$', '\x13', '\x2', '\xC1', '\xB8', 
		'\x3', '\x2', '\x2', '\x2', '\xC1', '\xBC', '\x3', '\x2', '\x2', '\x2', 
		'\xC1', '\xC0', '\x3', '\x2', '\x2', '\x2', '\xC2', '#', '\x3', '\x2', 
		'\x2', '\x2', '\xC3', '\xC4', '\b', '\x13', '\x1', '\x2', '\xC4', '\xC5', 
		'\x5', '&', '\x14', '\x2', '\xC5', '\xCE', '\x3', '\x2', '\x2', '\x2', 
		'\xC6', '\xC7', '\f', '\x5', '\x2', '\x2', '\xC7', '\xC8', '\a', '\"', 
		'\x2', '\x2', '\xC8', '\xCD', '\x5', '&', '\x14', '\x2', '\xC9', '\xCA', 
		'\f', '\x4', '\x2', '\x2', '\xCA', '\xCB', '\a', '#', '\x2', '\x2', '\xCB', 
		'\xCD', '\x5', '&', '\x14', '\x2', '\xCC', '\xC6', '\x3', '\x2', '\x2', 
		'\x2', '\xCC', '\xC9', '\x3', '\x2', '\x2', '\x2', '\xCD', '\xD0', '\x3', 
		'\x2', '\x2', '\x2', '\xCE', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xCE', 
		'\xCF', '\x3', '\x2', '\x2', '\x2', '\xCF', '%', '\x3', '\x2', '\x2', 
		'\x2', '\xD0', '\xCE', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xD2', '\b', 
		'\x14', '\x1', '\x2', '\xD2', '\xD3', '\x5', '(', '\x15', '\x2', '\xD3', 
		'\xDF', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xD5', '\f', '\x6', '\x2', 
		'\x2', '\xD5', '\xD6', '\a', '$', '\x2', '\x2', '\xD6', '\xDE', '\x5', 
		'(', '\x15', '\x2', '\xD7', '\xD8', '\f', '\x5', '\x2', '\x2', '\xD8', 
		'\xD9', '\a', '%', '\x2', '\x2', '\xD9', '\xDE', '\x5', '(', '\x15', '\x2', 
		'\xDA', '\xDB', '\f', '\x4', '\x2', '\x2', '\xDB', '\xDC', '\a', '&', 
		'\x2', '\x2', '\xDC', '\xDE', '\x5', '(', '\x15', '\x2', '\xDD', '\xD4', 
		'\x3', '\x2', '\x2', '\x2', '\xDD', '\xD7', '\x3', '\x2', '\x2', '\x2', 
		'\xDD', '\xDA', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xE1', '\x3', '\x2', 
		'\x2', '\x2', '\xDF', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xDF', '\xE0', 
		'\x3', '\x2', '\x2', '\x2', '\xE0', '\'', '\x3', '\x2', '\x2', '\x2', 
		'\xE1', '\xDF', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xE3', '\a', '#', 
		'\x2', '\x2', '\xE3', '\xE6', '\x5', '(', '\x15', '\x2', '\xE4', '\xE6', 
		'\x5', '*', '\x16', '\x2', '\xE5', '\xE2', '\x3', '\x2', '\x2', '\x2', 
		'\xE5', '\xE4', '\x3', '\x2', '\x2', '\x2', '\xE6', ')', '\x3', '\x2', 
		'\x2', '\x2', '\xE7', '\x109', '\x5', ',', '\x17', '\x2', '\xE8', '\xE9', 
		'\x5', ',', '\x17', '\x2', '\xE9', '\xEB', '\a', '\x13', '\x2', '\x2', 
		'\xEA', '\xEC', '\x5', '\x36', '\x1C', '\x2', '\xEB', '\xEA', '\x3', '\x2', 
		'\x2', '\x2', '\xEB', '\xEC', '\x3', '\x2', '\x2', '\x2', '\xEC', '\xED', 
		'\x3', '\x2', '\x2', '\x2', '\xED', '\xEE', '\a', '\x14', '\x2', '\x2', 
		'\xEE', '\x109', '\x3', '\x2', '\x2', '\x2', '\xEF', '\xF0', '\x5', ',', 
		'\x17', '\x2', '\xF0', '\xF1', '\a', '\x13', '\x2', '\x2', '\xF1', '\xF2', 
		'\a', '$', '\x2', '\x2', '\xF2', '\xF3', '\a', '\x14', '\x2', '\x2', '\xF3', 
		'\x109', '\x3', '\x2', '\x2', '\x2', '\xF4', '\x109', '\x5', '.', '\x18', 
		'\x2', '\xF5', '\x109', '\x5', '\x30', '\x19', '\x2', '\xF6', '\x109', 
		'\x5', '\x32', '\x1A', '\x2', '\xF7', '\x109', '\x5', '\x34', '\x1B', 
		'\x2', '\xF8', '\xF9', '\a', '\x15', '\x2', '\x2', '\xF9', '\x109', '\a', 
		'\x16', '\x2', '\x2', '\xFA', '\xFB', '\a', '\x17', '\x2', '\x2', '\xFB', 
		'\x109', '\a', '\x18', '\x2', '\x2', '\xFC', '\xFD', '\a', '\x1C', '\x2', 
		'\x2', '\xFD', '\xFE', '\x5', '\x38', '\x1D', '\x2', '\xFE', '\xFF', '\a', 
		'\x1B', '\x2', '\x2', '\xFF', '\x109', '\x3', '\x2', '\x2', '\x2', '\x100', 
		'\x101', '\a', '\x13', '\x2', '\x2', '\x101', '\x102', '\x5', '\x14', 
		'\v', '\x2', '\x102', '\x103', '\a', '\x14', '\x2', '\x2', '\x103', '\x109', 
		'\x3', '\x2', '\x2', '\x2', '\x104', '\x105', '\a', '\x13', '\x2', '\x2', 
		'\x105', '\x106', '\x5', '\x4', '\x3', '\x2', '\x106', '\x107', '\a', 
		'\x14', '\x2', '\x2', '\x107', '\x109', '\x3', '\x2', '\x2', '\x2', '\x108', 
		'\xE7', '\x3', '\x2', '\x2', '\x2', '\x108', '\xE8', '\x3', '\x2', '\x2', 
		'\x2', '\x108', '\xEF', '\x3', '\x2', '\x2', '\x2', '\x108', '\xF4', '\x3', 
		'\x2', '\x2', '\x2', '\x108', '\xF5', '\x3', '\x2', '\x2', '\x2', '\x108', 
		'\xF6', '\x3', '\x2', '\x2', '\x2', '\x108', '\xF7', '\x3', '\x2', '\x2', 
		'\x2', '\x108', '\xF8', '\x3', '\x2', '\x2', '\x2', '\x108', '\xFA', '\x3', 
		'\x2', '\x2', '\x2', '\x108', '\xFC', '\x3', '\x2', '\x2', '\x2', '\x108', 
		'\x100', '\x3', '\x2', '\x2', '\x2', '\x108', '\x104', '\x3', '\x2', '\x2', 
		'\x2', '\x109', '+', '\x3', '\x2', '\x2', '\x2', '\x10A', '\x10B', '\a', 
		'\'', '\x2', '\x2', '\x10B', '-', '\x3', '\x2', '\x2', '\x2', '\x10C', 
		'\x10D', '\a', '-', '\x2', '\x2', '\x10D', '/', '\x3', '\x2', '\x2', '\x2', 
		'\x10E', '\x10F', '\t', '\x4', '\x2', '\x2', '\x10F', '\x31', '\x3', '\x2', 
		'\x2', '\x2', '\x110', '\x111', '\a', '(', '\x2', '\x2', '\x111', '\x33', 
		'\x3', '\x2', '\x2', '\x2', '\x112', '\x113', '\a', '+', '\x2', '\x2', 
		'\x113', '\x35', '\x3', '\x2', '\x2', '\x2', '\x114', '\x119', '\x5', 
		'\x14', '\v', '\x2', '\x115', '\x116', '\a', '\x1A', '\x2', '\x2', '\x116', 
		'\x118', '\x5', '\x14', '\v', '\x2', '\x117', '\x115', '\x3', '\x2', '\x2', 
		'\x2', '\x118', '\x11B', '\x3', '\x2', '\x2', '\x2', '\x119', '\x117', 
		'\x3', '\x2', '\x2', '\x2', '\x119', '\x11A', '\x3', '\x2', '\x2', '\x2', 
		'\x11A', '\x37', '\x3', '\x2', '\x2', '\x2', '\x11B', '\x119', '\x3', 
		'\x2', '\x2', '\x2', '\x11C', '\x121', '\x5', '\x16', '\f', '\x2', '\x11D', 
		'\x11E', '\a', '\x1A', '\x2', '\x2', '\x11E', '\x120', '\x5', '\x16', 
		'\f', '\x2', '\x11F', '\x11D', '\x3', '\x2', '\x2', '\x2', '\x120', '\x123', 
		'\x3', '\x2', '\x2', '\x2', '\x121', '\x11F', '\x3', '\x2', '\x2', '\x2', 
		'\x121', '\x122', '\x3', '\x2', '\x2', '\x2', '\x122', '\x39', '\x3', 
		'\x2', '\x2', '\x2', '\x123', '\x121', '\x3', '\x2', '\x2', '\x2', '\x124', 
		'\x127', '\x5', '<', '\x1F', '\x2', '\x125', '\x127', '\a', '\x1B', '\x2', 
		'\x2', '\x126', '\x124', '\x3', '\x2', '\x2', '\x2', '\x126', '\x125', 
		'\x3', '\x2', '\x2', '\x2', '\x127', ';', '\x3', '\x2', '\x2', '\x2', 
		'\x128', '\x129', '\t', '\x5', '\x2', '\x2', '\x129', '=', '\x3', '\x2', 
		'\x2', '\x2', '\x12A', '\x12B', '\a', '\x3', '\x2', '\x2', '\x12B', '?', 
		'\x3', '\x2', '\x2', '\x2', ' ', '\x45', 'N', 'R', 'U', '\x61', '\x66', 
		'i', 'q', 't', 'y', '\x82', '\x86', '\x8D', '\x91', '\x98', '\xA0', '\xA6', 
		'\xAB', '\xB6', '\xC1', '\xCC', '\xCE', '\xDD', '\xDF', '\xE5', '\xEB', 
		'\x108', '\x119', '\x121', '\x126',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
